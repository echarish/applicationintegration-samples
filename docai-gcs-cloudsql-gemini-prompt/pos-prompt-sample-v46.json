{
  "name": "projects/251385050087/locations/europe-west2/integrations/pos-prompt-sample/versions/4a4df366-42ae-4464-9767-51c41138c398",
  "updateTime": "2024-12-11T13:17:15.778Z",
  "createTime": "2024-12-11T13:15:52.936Z",
  "lastModifierEmail": "harishgoogler@google.com",
  "triggerConfigs": [{
    "label": "Cloud Pub/Sub Trigger",
    "startTasks": [{
      "taskId": "3"
    }],
    "properties": {
      "IP Project name": "standalone-ip-prod-testing-88",
      "Subscription name": "standalone-ip-prod-testing-88_pos-new-file-gcs-topic",
      "Service account": "vertex-ai-app-integration-sa@standalone-ip-prod-testing-88.iam.gserviceaccount.com"
    },
    "triggerType": "CLOUD_PUBSUB_EXTERNAL",
    "triggerNumber": "2",
    "triggerId": "cloud_pubsub_external_trigger/projects/standalone-ip-prod-testing-88/subscriptions/standalone-ip-prod-testing-88_pos-new-file-gcs-topic",
    "position": {
      "x": 140,
      "y": 45
    }
  }, {
    "label": "Trigger POS Prompt",
    "startTasks": [{
      "taskId": "2"
    }],
    "properties": {
      "Trigger name": "pos-prompt-sample_API_1"
    },
    "triggerType": "API",
    "triggerNumber": "1",
    "triggerId": "api_trigger/pos-prompt-sample_API_1",
    "position": {
      "x": 632,
      "y": 324
    },
    "inputVariables": {
    },
    "outputVariables": {
    }
  }],
  "taskConfigs": [{
    "task": "GenericConnectorTask",
    "taskId": "1",
    "parameters": {
      "connectorInputPayload": {
        "key": "connectorInputPayload",
        "value": {
          "stringValue": "$`Task_1_connectorInputPayload`$"
        }
      },
      "connectionName": {
        "key": "connectionName",
        "value": {
          "stringValue": "projects/standalone-ip-prod-testing-88/locations/europe-west2/connections/pos-vertex-ai-prompt"
        }
      },
      "connectorOutputPayload": {
        "key": "connectorOutputPayload",
        "value": {
          "stringValue": "$`Task_1_connectorOutputPayload`$"
        }
      },
      "operation": {
        "key": "operation",
        "value": {
          "stringValue": "EXECUTE_ACTION"
        }
      },
      "connectionVersion": {
        "key": "connectionVersion",
        "value": {
          "stringValue": "projects/standalone-ip-prod-testing-88/locations/global/providers/gcp/connectors/vertexai/versions/1"
        }
      },
      "actionName": {
        "key": "actionName",
        "value": {
          "stringValue": "POST_v1/%7Bmodel%7D%3AstreamGenerateContent**notused**15048ec5-1a3c-48ff-8cad-fa412a5b88aa"
        }
      }
    },
    "nextTasks": [{
      "taskId": "6"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "POS Prompt Vertex AI",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 380,
      "y": 725
    }
  }, {
    "task": "GenericConnectorTask",
    "taskId": "16",
    "parameters": {
      "connectorInputPayload": {
        "key": "connectorInputPayload",
        "value": {
          "stringValue": "$`Task_16_connectorInputPayload`$"
        }
      },
      "connectionName": {
        "key": "connectionName",
        "value": {
          "stringValue": "projects/standalone-ip-prod-testing-88/locations/europe-west2/connections/standalone-gcs"
        }
      },
      "connectorOutputPayload": {
        "key": "connectorOutputPayload",
        "value": {
          "stringValue": "$`Task_16_connectorOutputPayload`$"
        }
      },
      "operation": {
        "key": "operation",
        "value": {
          "stringValue": "EXECUTE_ACTION"
        }
      },
      "connectionVersion": {
        "key": "connectionVersion",
        "value": {
          "stringValue": "projects/standalone-ip-prod-testing-88/locations/global/providers/gcp/connectors/gcs/versions/1"
        }
      },
      "actionName": {
        "key": "actionName",
        "value": {
          "stringValue": "DownloadObject"
        }
      }
    },
    "nextTasks": [{
      "taskId": "27",
      "condition": "$pos-response-result$ \u003d \"Blue\"",
      "displayName": "Blue"
    }, {
      "taskId": "22",
      "condition": "$pos-response-result$ \u003d \"Green\"",
      "displayName": "Green"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Get PDF Data",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 380,
      "y": 1269
    }
  }, {
    "task": "FieldMappingTask",
    "taskId": "17",
    "parameters": {
      "FieldMappingConfigTaskParameterKey": {
        "key": "FieldMappingConfigTaskParameterKey",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.proto.FieldMappingConfig\",\n  \"mappedFields\": [{\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$`CONFIG_GCS_POS_BUCKET`$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_16_connectorInputPayload`.Bucket$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$object_id_gcs$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_16_connectorInputPayload`.ObjectFilePath$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"BOOLEAN_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"literalValue\": {\n            \"booleanValue\": true\n          }\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_16_connectorInputPayload`.HasBytes$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }]\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "16"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Setup To Get file GCS",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 380,
      "y": 1133
    }
  }, {
    "task": "Doc AI - Process",
    "taskId": "18",
    "parameters": {
      "request": {
        "key": "request",
        "value": {
          "stringValue": "$`Task_18_request`$"
        }
      },
      "projectsId": {
        "key": "projectsId",
        "value": {
          "stringValue": "standalone-ip-prod-testing-88"
        }
      },
      "authConfigName": {
        "key": "authConfigName",
        "value": {
          "stringValue": "pos-prompt-test-sa"
        }
      },
      "authConfig": {
        "key": "authConfig",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.authconfig.AuthConfigTaskParam\"\n}"
        }
      },
      "locationsId": {
        "key": "locationsId",
        "value": {
          "stringValue": "eu"
        }
      },
      "response": {
        "key": "response",
        "value": {
          "stringArray": {
            "stringValues": ["$`Task_18_response`$"]
          }
        }
      },
      "processorsId": {
        "key": "processorsId",
        "value": {
          "stringValue": "ff66e33c7b6eadfa"
        }
      },
      "taskTemplateId": {
        "key": "taskTemplateId",
        "value": {
          "stringValue": "83c61f52-6536-4936-8123-1ca1ee236d59"
        }
      }
    },
    "nextTasks": [{
      "taskId": "23"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Green Doc",
    "taskTemplate": "Doc AI - Process",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 620,
      "y": 1541
    }
  }, {
    "task": "FieldMappingTask",
    "taskId": "2",
    "parameters": {
      "FieldMappingConfigTaskParameterKey": {
        "key": "FieldMappingConfigTaskParameterKey",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.proto.FieldMappingConfig\",\n  \"mappedFields\": [{\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"literalValue\": {\n            \"stringValue\": \"projects/\"\n          }\n        },\n        \"transformationFunctions\": [{\n          \"functionType\": {\n            \"stringFunction\": {\n              \"functionName\": \"CONCAT\"\n            }\n          },\n          \"parameters\": [{\n            \"initialValue\": {\n              \"referenceValue\": \"$`CONFIG_Vertex_Project_ID`$\"\n            },\n            \"transformationFunctions\": [{\n              \"functionType\": {\n                \"stringFunction\": {\n                  \"functionName\": \"CONCAT\"\n                }\n              },\n              \"parameters\": [{\n                \"initialValue\": {\n                  \"literalValue\": {\n                    \"stringValue\": \"/locations/\"\n                  }\n                },\n                \"transformationFunctions\": [{\n                  \"functionType\": {\n                    \"stringFunction\": {\n                      \"functionName\": \"CONCAT\"\n                    }\n                  },\n                  \"parameters\": [{\n                    \"initialValue\": {\n                      \"referenceValue\": \"$`CONFIG_Vertex_LOCATION_ID`$\"\n                    },\n                    \"transformationFunctions\": [{\n                      \"functionType\": {\n                        \"stringFunction\": {\n                          \"functionName\": \"CONCAT\"\n                        }\n                      },\n                      \"parameters\": [{\n                        \"initialValue\": {\n                          \"literalValue\": {\n                            \"stringValue\": \"/publishers/google/models/\"\n                          }\n                        },\n                        \"transformationFunctions\": [{\n                          \"functionType\": {\n                            \"stringFunction\": {\n                              \"functionName\": \"CONCAT\"\n                            }\n                          },\n                          \"parameters\": [{\n                            \"initialValue\": {\n                              \"referenceValue\": \"$`CONFIG_Vertex_MODEL_ID`$\"\n                            }\n                          }]\n                        }]\n                      }]\n                    }]\n                  }]\n                }]\n              }]\n            }]\n          }]\n        }]\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$Vertex_Path_Parameter$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$Vertex_Path_Parameter$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_1_connectorInputPayload`.Path parameters.model$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"JSON_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$request_content$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_1_connectorInputPayload`.RequestBody.contents$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }]\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "1"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Data Mapping",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 380,
      "y": 589
    }
  }, {
    "task": "FieldMappingTask",
    "taskId": "22",
    "parameters": {
      "FieldMappingConfigTaskParameterKey": {
        "key": "FieldMappingConfigTaskParameterKey",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.proto.FieldMappingConfig\",\n  \"mappedFields\": [{\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"literalValue\": {\n            \"stringValue\": \"application/pdf\"\n          }\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_18_request`.inlineDocument.mimeType$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$`Task_16_connectorOutputPayload`$\"\n        },\n        \"transformationFunctions\": [{\n          \"functionType\": {\n            \"jsonFunction\": {\n              \"functionName\": \"GET_ELEMENT\"\n            }\n          },\n          \"parameters\": [{\n            \"initialValue\": {\n              \"literalValue\": {\n                \"intValue\": \"0\"\n              }\n            }\n          }]\n        }, {\n          \"functionType\": {\n            \"jsonFunction\": {\n              \"functionName\": \"GET_PROPERTY\"\n            }\n          },\n          \"parameters\": [{\n            \"initialValue\": {\n              \"literalValue\": {\n                \"stringValue\": \"ContentBytes\"\n              }\n            }\n          }]\n        }, {\n          \"functionType\": {\n            \"jsonFunction\": {\n              \"functionName\": \"TO_STRING\"\n            }\n          }\n        }]\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_18_request`.inlineDocument.content$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }]\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "18"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Setup Green DocAI",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 620,
      "y": 1405
    }
  }, {
    "task": "FieldMappingTask",
    "taskId": "23",
    "parameters": {
      "FieldMappingConfigTaskParameterKey": {
        "key": "FieldMappingConfigTaskParameterKey",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.proto.FieldMappingConfig\",\n  \"mappedFields\": [{\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$`Task_18_response`.document.text$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$doc-ocr-text-data$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }]\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "25"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Get Green OCR Text Response",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 620,
      "y": 1677
    }
  }, {
    "task": "GenericConnectorTask",
    "taskId": "24",
    "parameters": {
      "entityType": {
        "key": "entityType",
        "value": {
          "stringValue": "pos_file_metadata"
        }
      },
      "connectorInputPayload": {
        "key": "connectorInputPayload",
        "value": {
          "stringValue": "$`Task_24_connectorInputPayload`$"
        }
      },
      "connectionName": {
        "key": "connectionName",
        "value": {
          "stringValue": "projects/standalone-ip-prod-testing-88/locations/europe-west2/connections/pos-file-metadata-cloudsql-con"
        }
      },
      "connectorOutputPayload": {
        "key": "connectorOutputPayload",
        "value": {
          "stringValue": "$`Task_24_connectorOutputPayload`$"
        }
      },
      "operation": {
        "key": "operation",
        "value": {
          "stringValue": "CREATE_ENTITY"
        }
      },
      "connectionVersion": {
        "key": "connectionVersion",
        "value": {
          "stringValue": "projects/standalone-ip-prod-testing-88/locations/global/providers/gcp/connectors/cloudsql-mysql/versions/1"
        }
      }
    },
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Write to CloudSQL",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 620,
      "y": 1949
    }
  }, {
    "task": "FieldMappingTask",
    "taskId": "25",
    "parameters": {
      "FieldMappingConfigTaskParameterKey": {
        "key": "FieldMappingConfigTaskParameterKey",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.proto.FieldMappingConfig\",\n  \"mappedFields\": [{\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$object_id_gcs$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_24_connectorInputPayload`.file_name$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$prompt-input-file-uri$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_24_connectorInputPayload`.gcs_uri$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$pos-response-result$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_24_connectorInputPayload`.pos_type$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"baseFunction\": {\n            \"functionType\": {\n              \"baseFunction\": {\n                \"functionName\": \"NOW_IN_MILLIS\"\n              }\n            }\n          }\n        },\n        \"transformationFunctions\": [{\n          \"functionType\": {\n            \"intFunction\": {\n              \"functionName\": \"EPOCH_TO_HUMAN_READABLE_TIME\"\n            }\n          },\n          \"parameters\": [{\n            \"initialValue\": {\n              \"literalValue\": {\n                \"stringValue\": \"yyyy-MM-dd HH:mm:ss\"\n              }\n            }\n          }, {\n            \"initialValue\": {\n              \"literalValue\": {\n                \"stringValue\": \"GMT\"\n              }\n            }\n          }]\n        }]\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_24_connectorInputPayload`.created_date$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$doc-ocr-text-data$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_24_connectorInputPayload`.file_text$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }]\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "24"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Map POS SQL Data",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 620,
      "y": 1813
    }
  }, {
    "task": "Doc AI - Process",
    "taskId": "26",
    "parameters": {
      "request": {
        "key": "request",
        "value": {
          "stringValue": "$`Task_26_request`$"
        }
      },
      "projectsId": {
        "key": "projectsId",
        "value": {
          "stringValue": "standalone-ip-prod-testing-88"
        }
      },
      "authConfigName": {
        "key": "authConfigName",
        "value": {
          "stringValue": "pos-prompt-test-sa"
        }
      },
      "authConfig": {
        "key": "authConfig",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.authconfig.AuthConfigTaskParam\"\n}"
        }
      },
      "locationsId": {
        "key": "locationsId",
        "value": {
          "stringValue": "eu"
        }
      },
      "response": {
        "key": "response",
        "value": {
          "stringArray": {
            "stringValues": ["$`Task_26_response`$"]
          }
        }
      },
      "processorsId": {
        "key": "processorsId",
        "value": {
          "stringValue": "ff66e33c7b6eadfa"
        }
      },
      "taskTemplateId": {
        "key": "taskTemplateId",
        "value": {
          "stringValue": "83c61f52-6536-4936-8123-1ca1ee236d59"
        }
      }
    },
    "nextTasks": [{
      "taskId": "28"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Blue Doc",
    "taskTemplate": "Doc AI - Process",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 140,
      "y": 1541
    }
  }, {
    "task": "FieldMappingTask",
    "taskId": "27",
    "parameters": {
      "FieldMappingConfigTaskParameterKey": {
        "key": "FieldMappingConfigTaskParameterKey",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.proto.FieldMappingConfig\",\n  \"mappedFields\": [{\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"literalValue\": {\n            \"stringValue\": \"application/pdf\"\n          }\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_26_request`.inlineDocument.mimeType$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$`Task_16_connectorOutputPayload`$\"\n        },\n        \"transformationFunctions\": [{\n          \"functionType\": {\n            \"jsonFunction\": {\n              \"functionName\": \"GET_ELEMENT\"\n            }\n          },\n          \"parameters\": [{\n            \"initialValue\": {\n              \"literalValue\": {\n                \"intValue\": \"0\"\n              }\n            }\n          }]\n        }, {\n          \"functionType\": {\n            \"jsonFunction\": {\n              \"functionName\": \"GET_PROPERTY\"\n            }\n          },\n          \"parameters\": [{\n            \"initialValue\": {\n              \"literalValue\": {\n                \"stringValue\": \"ContentBytes\"\n              }\n            }\n          }]\n        }, {\n          \"functionType\": {\n            \"jsonFunction\": {\n              \"functionName\": \"TO_STRING\"\n            }\n          }\n        }]\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_26_request`.inlineDocument.content$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }]\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "26"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Setup Blue DocAI",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 140,
      "y": 1405
    }
  }, {
    "task": "FieldMappingTask",
    "taskId": "28",
    "parameters": {
      "FieldMappingConfigTaskParameterKey": {
        "key": "FieldMappingConfigTaskParameterKey",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.proto.FieldMappingConfig\",\n  \"mappedFields\": [{\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$`Task_26_response`.document.text$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$doc-ocr-text-data$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }]\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "29"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Get Blue OCR Text Response",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 140,
      "y": 1677
    }
  }, {
    "task": "FieldMappingTask",
    "taskId": "29",
    "parameters": {
      "FieldMappingConfigTaskParameterKey": {
        "key": "FieldMappingConfigTaskParameterKey",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.proto.FieldMappingConfig\",\n  \"mappedFields\": [{\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$object_id_gcs$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_24_connectorInputPayload`.file_name$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$prompt-input-file-uri$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_24_connectorInputPayload`.gcs_uri$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$pos-response-result$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_24_connectorInputPayload`.pos_type$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"baseFunction\": {\n            \"functionType\": {\n              \"baseFunction\": {\n                \"functionName\": \"NOW_IN_MILLIS\"\n              }\n            }\n          }\n        },\n        \"transformationFunctions\": [{\n          \"functionType\": {\n            \"intFunction\": {\n              \"functionName\": \"EPOCH_TO_HUMAN_READABLE_TIME\"\n            }\n          },\n          \"parameters\": [{\n            \"initialValue\": {\n              \"literalValue\": {\n                \"stringValue\": \"yyyy-MM-dd HH:mm:ss\"\n              }\n            }\n          }, {\n            \"initialValue\": {\n              \"literalValue\": {\n                \"stringValue\": \"GMT\"\n              }\n            }\n          }]\n        }]\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_24_connectorInputPayload`.created_date$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$doc-ocr-text-data$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$`Task_24_connectorInputPayload`.file_text$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }]\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "30"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Map POS SQL Data",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 140,
      "y": 1813
    }
  }, {
    "task": "FieldMappingTask",
    "taskId": "3",
    "parameters": {
      "FieldMappingConfigTaskParameterKey": {
        "key": "FieldMappingConfigTaskParameterKey",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.proto.FieldMappingConfig\",\n  \"mappedFields\": [{\n    \"inputField\": {\n      \"fieldType\": \"JSON_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$CloudPubSubMessage$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$pub-sub-trigger-message-data$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$pub-sub-trigger-message-data.attributes.objectId$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$object_id_gcs$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$prompt-input-file-uri$\"\n        },\n        \"transformationFunctions\": [{\n          \"functionType\": {\n            \"stringFunction\": {\n              \"functionName\": \"CONCAT\"\n            }\n          },\n          \"parameters\": [{\n            \"initialValue\": {\n              \"referenceValue\": \"$object_id_gcs$\"\n            }\n          }]\n        }]\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$prompt-input-file-uri$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$prompt-input-file-uri$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$filedata-temp.fileUri$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }, {\n    \"inputField\": {\n      \"fieldType\": \"STRING_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$pub-sub-trigger-message-data.attributes.eventType$\"\n        }\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$GCS_Object_Event_Type$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }]\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "4",
      "condition": "$GCS_Object_Event_Type$ \u003d \"OBJECT_FINALIZE\"",
      "displayName": "\u003cNew GCS File Created\u003e"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "PubSub Data Mapping",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 140,
      "y": 181
    }
  }, {
    "task": "GenericConnectorTask",
    "taskId": "30",
    "parameters": {
      "entityType": {
        "key": "entityType",
        "value": {
          "stringValue": "pos_file_metadata"
        }
      },
      "connectorInputPayload": {
        "key": "connectorInputPayload",
        "value": {
          "stringValue": "$`Task_24_connectorInputPayload`$"
        }
      },
      "connectionName": {
        "key": "connectionName",
        "value": {
          "stringValue": "projects/standalone-ip-prod-testing-88/locations/europe-west2/connections/pos-file-metadata-cloudsql-con"
        }
      },
      "connectorOutputPayload": {
        "key": "connectorOutputPayload",
        "value": {
          "stringValue": "$`Task_24_connectorOutputPayload`$"
        }
      },
      "operation": {
        "key": "operation",
        "value": {
          "stringValue": "CREATE_ENTITY"
        }
      },
      "connectionVersion": {
        "key": "connectionVersion",
        "value": {
          "stringValue": "projects/standalone-ip-prod-testing-88/locations/global/providers/gcp/connectors/cloudsql-mysql/versions/1"
        }
      }
    },
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Write to CloudSQL",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 140,
      "y": 1949
    }
  }, {
    "task": "JavaScriptTask",
    "taskId": "4",
    "parameters": {
      "script": {
        "key": "script",
        "value": {
          "stringValue": "\n/**\n * Function that is called during the JavaScript Task execution.\n * @param {IntegrationEvent} event\n */\nfunction executeScript(event) {\n\n    var jsonData \u003d [\n    {\n        \"role\": \"user\",\n        \"parts\": [\n            {\n                \"text\": \"User prompt is:\\nPlease identify the PoS document.\"\n            },\n            {\n                \"fileData\": {\n                    \"mimeType\": \"application/pdf\",\n                    \"fileUri\": \"NEW_FILE_URI\"\n                }\n            },\n            {\n                \"text\": \"Respond only as [Green, Blue, Miscellaneous, Incorrect Documentation]\"\n            }\n        ]\n    }\n    ];\n\n    var prompt_input_file_uri \u003d event.getParameter(\"prompt-input-file-uri\");\n    var content_string \u003d JSON.stringify(jsonData).replace(\"NEW_FILE_URI\", prompt_input_file_uri);\n    event.setParameter(\"request_content_tmp\",content_string);\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "5"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "JavaScript",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 140,
      "y": 317
    }
  }, {
    "task": "FieldMappingTask",
    "taskId": "5",
    "parameters": {
      "FieldMappingConfigTaskParameterKey": {
        "key": "FieldMappingConfigTaskParameterKey",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.proto.FieldMappingConfig\",\n  \"mappedFields\": [{\n    \"inputField\": {\n      \"fieldType\": \"JSON_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$request_content_tmp$\"\n        },\n        \"transformationFunctions\": [{\n          \"functionType\": {\n            \"stringFunction\": {\n              \"functionName\": \"TO_JSON\"\n            }\n          }\n        }]\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$request_content$\",\n      \"fieldType\": \"JSON_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }]\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "2"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Tmp To Main",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 140,
      "y": 453
    }
  }, {
    "task": "FieldMappingTask",
    "taskId": "6",
    "parameters": {
      "FieldMappingConfigTaskParameterKey": {
        "key": "FieldMappingConfigTaskParameterKey",
        "value": {
          "jsonValue": "{\n  \"@type\": \"type.googleapis.com/enterprise.crm.eventbus.proto.FieldMappingConfig\",\n  \"mappedFields\": [{\n    \"inputField\": {\n      \"fieldType\": \"JSON_VALUE\",\n      \"transformExpression\": {\n        \"initialValue\": {\n          \"referenceValue\": \"$`Task_1_connectorOutputPayload`$\"\n        },\n        \"transformationFunctions\": [{\n          \"functionType\": {\n            \"jsonFunction\": {\n              \"functionName\": \"GET_PROPERTY\"\n            }\n          },\n          \"parameters\": [{\n            \"initialValue\": {\n              \"literalValue\": {\n                \"stringValue\": \"ResponseBody\"\n              }\n            }\n          }]\n        }]\n      }\n    },\n    \"outputField\": {\n      \"referenceKey\": \"$pos-response-body-str$\",\n      \"fieldType\": \"STRING_VALUE\",\n      \"cardinality\": \"OPTIONAL\"\n    }\n  }]\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "7"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Process POS response",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 380,
      "y": 861
    }
  }, {
    "task": "JavaScriptTask",
    "taskId": "7",
    "parameters": {
      "script": {
        "key": "script",
        "value": {
          "stringValue": "\n/**\n * Function that is called during the JavaScript Task execution.\n * @param {IntegrationEvent} event\n */\nfunction executeScript(event) {\n\n  var jsonString \u003d  event.getParameter(\"pos-response-body-str\");\n  jsonString \u003d JSON.parse(jsonString)[0];\n  var parsedData \u003d JSON.parse(jsonString);\n  var extractTextFields \u003d (data) \u003d\u003e {\n  var texts \u003d [];\n    data.forEach(item \u003d\u003e {\n        item.candidates.forEach(candidate \u003d\u003e {\n        if (candidate.content \u0026\u0026 candidate.content.parts) {\n            candidate.content.parts.forEach(part \u003d\u003e {\n            if (part.text !\u003d\u003d undefined) {\n                texts.push(part.text);\n            }\n            });\n        }\n        });\n    });\n\n    return texts;\n    };\n\n    var textFields \u003d extractTextFields(parsedData);\n    event.setParameter(\"pos-response-result\",textFields[0]);\n\n}"
        }
      }
    },
    "nextTasks": [{
      "taskId": "17"
    }],
    "taskExecutionStrategy": "WHEN_ALL_SUCCEED",
    "displayName": "Process POS Response",
    "externalTaskType": "NORMAL_TASK",
    "position": {
      "x": 380,
      "y": 997
    }
  }],
  "integrationParameters": [{
    "key": "`ExecutionMode`",
    "dataType": "STRING_VALUE",
    "defaultValue": {
      "stringValue": ""
    },
    "displayName": "`ExecutionMode`",
    "isTransient": true
  }, {
    "key": "`ErrorInfo`",
    "dataType": "JSON_VALUE",
    "defaultValue": {
      "jsonValue": "{\n  \"message\": \"\",\n  \"code\": 0.0\n}"
    },
    "displayName": "`ErrorInfo`",
    "isTransient": true,
    "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"code\": {\n      \"type\": \"number\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}"
  }, {
    "key": "`ExecutionId`",
    "dataType": "STRING_VALUE",
    "defaultValue": {
      "stringValue": ""
    },
    "displayName": "`ExecutionId`",
    "isTransient": true
  }, {
    "key": "`IntegrationName`",
    "dataType": "STRING_VALUE",
    "defaultValue": {
      "stringValue": ""
    },
    "displayName": "`IntegrationName`",
    "isTransient": true
  }, {
    "key": "`Region`",
    "dataType": "STRING_VALUE",
    "defaultValue": {
      "stringValue": ""
    },
    "displayName": "`Region`",
    "isTransient": true
  }, {
    "key": "`ProjectId`",
    "dataType": "STRING_VALUE",
    "defaultValue": {
      "stringValue": ""
    },
    "displayName": "`ProjectId`",
    "isTransient": true
  }, {
    "key": "`Task_1_connectorInputPayload`",
    "dataType": "JSON_VALUE",
    "displayName": "`Task_1_connectorInputPayload`",
    "producer": "1_1",
    "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"RequestBody\": {\n      \"type\": \"object\",\n      \"description\": \"Request message for [PredictionService.GenerateContent].\",\n      \"properties\": {\n        \"tools\": {\n          \"type\": \"array\",\n          \"description\": \"Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model.\",\n          \"items\": {\n            \"type\": \"object\",\n            \"description\": \"Tool details that the model may use to generate response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model. A Tool object should contain exactly one type of Tool (e.g FunctionDeclaration, Retrieval or GoogleSearchRetrieval).\"\n          }\n        },\n        \"contents\": {\n          \"type\": \"array\",\n          \"description\": \"Required. The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries, this is a repeated field that contains conversation history + latest request.\",\n          \"items\": {\n            \"type\": \"object\",\n            \"description\": \"The base structured datatype containing multi-part content of a message. A `Content` includes a `role` field designating the producer of the `Content` and a `parts` field containing multi-part data that contains the content of the message turn.\"\n          }\n        },\n        \"generationConfig\": {\n          \"type\": \"object\",\n          \"description\": \"Generation config.\"\n        },\n        \"safetySettings\": {\n          \"type\": \"array\",\n          \"description\": \"Optional. Per request settings for blocking unsafe content. Enforced on GenerateContentResponse.candidates.\",\n          \"items\": {\n            \"type\": \"object\",\n            \"description\": \"Safety settings.\"\n          }\n        },\n        \"systemInstruction\": {\n          \"type\": \"object\",\n          \"description\": \"The base structured datatype containing multi-part content of a message. A `Content` includes a `role` field designating the producer of the `Content` and a `parts` field containing multi-part data that contains the content of the message turn.\"\n        }\n      }\n    },\n    \"RequestHasBytes\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if request has bytes\",\n      \"properties\": {\n      }\n    },\n    \"ResponseHasBytes\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if response has bytes\",\n      \"properties\": {\n      }\n    },\n    \"Path parameters\": {\n      \"type\": \"object\",\n      \"required\": [\"model\"],\n      \"properties\": {\n        \"model\": {\n          \"type\": \"string\",\n          \"description\": \"Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*/models/*`\"\n        }\n      }\n    }\n  }\n}"
  }, {
    "key": "`Task_1_connectorOutputPayload`",
    "dataType": "JSON_VALUE",
    "displayName": "`Task_1_connectorOutputPayload`",
    "isTransient": true,
    "producer": "1_1",
    "jsonSchema": "{\n  \"type\": \"array\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ResponseBody\": {\n        \"type\": \"string\",\n        \"properties\": {\n        }\n      },\n      \"ResponseHeaders\": {\n        \"type\": \"object\",\n        \"description\": \"Response headers. Will consist of (key,value) and (key, list of value) pairs.\",\n        \"properties\": {\n        }\n      },\n      \"Status\": {\n        \"type\": \"number\",\n        \"description\": \"Status Code received.\",\n        \"properties\": {\n        }\n      }\n    },\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n  }\n}"
  }, {
    "key": "Vertex_Path_Parameter",
    "dataType": "STRING_VALUE",
    "displayName": "Vertex_Path_Parameter"
  }, {
    "key": "CloudPubSubMessage",
    "dataType": "JSON_VALUE",
    "displayName": "CloudPubSubMessage",
    "isTransient": true,
    "producer": "2_2",
    "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"title\": \"Cloud Pub/Sub Message\",\n  \"description\": \"Message received by Cloud Pub/Sub.\",\n  \"properties\": {\n    \"data\": {\n      \"type\": \"string\",\n      \"description\": \"The message data sent by the publisher\"\n    },\n    \"attributes\": {\n      \"type\": \"object\",\n      \"description\": \"Attributes for this message\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"ID of this message, assigned by the server when the message is published. Guaranteed to be unique within the topic.\"\n    },\n    \"publishTime\": {\n      \"type\": \"string\",\n      \"description\": \"The time at which the message was published, populated by the server when it receives the topics.publish call\"\n    },\n    \"orderingKey\": {\n      \"type\": \"string\",\n      \"description\": \"Identifies related messages for which publish order should be respected.\"\n    }\n  }\n}"
  }, {
    "key": "pub-sub-trigger-message-data",
    "dataType": "JSON_VALUE",
    "displayName": "pub-sub-trigger-message-data",
    "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"publishTime\": {\n      \"type\": \"string\"\n    },\n    \"data\": {\n      \"type\": \"string\"\n    },\n    \"messageId\": {\n      \"type\": \"string\"\n    },\n    \"attributes\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"objectGeneration\": {\n          \"type\": \"string\"\n        },\n        \"eventTime\": {\n          \"type\": \"string\"\n        },\n        \"bucketId\": {\n          \"type\": \"string\"\n        },\n        \"eventType\": {\n          \"type\": \"string\"\n        },\n        \"notificationConfig\": {\n          \"type\": \"string\"\n        },\n        \"payloadFormat\": {\n          \"type\": \"string\"\n        },\n        \"objectId\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}"
  }, {
    "key": "prompt-input-file-uri",
    "dataType": "STRING_VALUE",
    "defaultValue": {
      "stringValue": "gs://standalone-ip-prod-testing-88-app-integration-sample/"
    },
    "displayName": "prompt-input-file-uri"
  }, {
    "key": "object_id_gcs",
    "dataType": "STRING_VALUE",
    "displayName": "object_id_gcs"
  }, {
    "key": "filedata-temp",
    "dataType": "JSON_VALUE",
    "defaultValue": {
      "jsonValue": "{\n  \"mimeType\": \"application/pdf\",\n  \"fileUri\": \"gs://standalone-ip-prod-testing-88-app-integration-sample/vertex-ai-sample/682.711 m3.pdf\"\n}"
    },
    "displayName": "filedata-temp",
    "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"fileUri\": {\n      \"type\": \"string\"\n    },\n    \"mimeType\": {\n      \"type\": \"string\"\n    }\n  }\n}"
  }, {
    "key": "request_content",
    "dataType": "JSON_VALUE",
    "defaultValue": {
      "jsonValue": "[{\n  \"role\": \"user\",\n  \"parts\": [{\n    \"text\": \"User prompt is:\\nPlease identify the PoS document.\"\n  }, {\n    \"fileData\": {\n      \"mimeType\": \"application/pdf\",\n      \"fileUri\": \"gs://standalone-ip-prod-testing-88-app-integration-sample/vertex-ai-sample/682.711 m3.pdf\"\n    }\n  }, {\n    \"text\": \"Respond only as [Green, Blue, Miscellaneous, Incorrect Documentation]\"\n  }]\n}]"
    },
    "displayName": "request_content"
  }, {
    "key": "request_content_tmp",
    "dataType": "STRING_VALUE",
    "displayName": "request_content_tmp"
  }, {
    "key": "pos-response-body-str",
    "dataType": "STRING_VALUE",
    "displayName": "pos-response-body-str"
  }, {
    "key": "pos-response-result",
    "dataType": "STRING_VALUE",
    "displayName": "pos-response-result"
  }, {
    "key": "`Task_16_connectorInputPayload`",
    "dataType": "JSON_VALUE",
    "displayName": "`Task_16_connectorInputPayload`",
    "producer": "1_16",
    "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"Bucket\": {\n      \"type\": \"string\",\n      \"description\": \"Bucket name where the object is located.\"\n    },\n    \"ObjectFilePath\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Object name for the object that should be retrieved. If not specified, all the objects from the specified bucket will be retrieved.\"\n    },\n    \"HasBytes\": {\n      \"type\": [\"boolean\", \"null\"],\n      \"description\": \"Whether to download content as bytes.\",\n      \"default\": false\n    },\n    \"UpdatedEndDate\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"The end of the date range to download objects. If not specified, objects will be downloaded from the specified UpdatedStartDate until the present day.\"\n    },\n    \"UpdatedStartDate\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"The start of the date range to download objects. If not specified, objects will be downloaded from the beginning of the time until the UpdatedEndDate.\"\n    }\n  },\n  \"required\": [\"Bucket\"]\n}"
  }, {
    "key": "`Task_16_connectorOutputPayload`",
    "dataType": "JSON_VALUE",
    "displayName": "`Task_16_connectorOutputPayload`",
    "isTransient": true,
    "producer": "1_16",
    "jsonSchema": "{\n  \"type\": \"array\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n    },\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n  }\n}"
  }, {
    "key": "`Task_18_request`",
    "dataType": "JSON_VALUE",
    "defaultValue": {
      "jsonValue": "{\n}"
    },
    "displayName": "`Task_18_request`",
    "isTransient": true,
    "producer": "1_18",
    "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"rawDocument\": {\n      \"description\": \"Payload message of raw document content (bytes).\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"mimeType\": {\n          \"type\": \"string\",\n          \"description\": \"An IANA MIME type (RFC6838) indicating the nature and format of the content.\"\n        },\n        \"content\": {\n          \"type\": \"string\",\n          \"description\": \"Inline document content.\",\n          \"format\": \"byte\"\n        }\n      }\n    },\n    \"skipHumanReview\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether Human Review feature should be skipped for this request. Default to false.\"\n    },\n    \"inlineDocument\": {\n      \"properties\": {\n        \"revisions\": {\n          \"description\": \"Placeholder. Revision history of this document.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"description\": \"Contains past or forward revisions of this document.\",\n            \"properties\": {\n              \"agent\": {\n                \"type\": \"string\",\n                \"description\": \"If the change was made by a person specify the name or id of that person.\"\n              },\n              \"createTime\": {\n                \"format\": \"google-datetime\",\n                \"description\": \"The time that the revision was created, internally generated by doc proto storage at the time of create.\",\n                \"type\": \"string\"\n              },\n              \"humanReview\": {\n                \"description\": \"Human Review information of the document.\",\n                \"properties\": {\n                  \"stateMessage\": {\n                    \"description\": \"A message providing more details about the current state of processing. For example, the rejection reason when the state is `rejected`.\",\n                    \"type\": \"string\"\n                  },\n                  \"state\": {\n                    \"description\": \"Human review state. e.g. `requested`, `succeeded`, `rejected`.\",\n                    \"type\": \"string\"\n                  }\n                },\n                \"type\": \"object\"\n              },\n              \"parentIds\": {\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"array\",\n                \"description\": \"The revisions that this revision is based on. Must include all the ids that have anything to do with this revision - eg. there are `provenance.parent.revision` fields that index into this field.\"\n              },\n              \"parent\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"format\": \"int32\",\n                  \"type\": \"integer\"\n                },\n                \"description\": \"The revisions that this revision is based on. This can include one or more parent (when documents are merged.) This field represents the index into the `revisions` field.\"\n              },\n              \"id\": {\n                \"description\": \"Id of the revision, internally generated by doc proto storage. Unique within the context of the document.\",\n                \"type\": \"string\"\n              },\n              \"processor\": {\n                \"type\": \"string\",\n                \"description\": \"If the annotation was made by processor identify the processor by its resource name.\"\n              }\n            }\n          }\n        },\n        \"pages\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"A page in a Document.\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"transforms\": {\n                \"type\": \"array\",\n                \"description\": \"Transformation matrices that were applied to the original document image to produce Page.image.\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"description\": \"Representation for transformation matrix, intended to be compatible and used with OpenCV format for image manipulation.\",\n                  \"properties\": {\n                    \"cols\": {\n                      \"format\": \"int32\",\n                      \"type\": \"integer\",\n                      \"description\": \"Number of columns in the matrix.\"\n                    },\n                    \"type\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\",\n                      \"description\": \"This encodes information about what data type the matrix uses. For example, 0 (CV_8U) is an unsigned 8-bit image. For the full list of OpenCV primitive data types, please refer to https://docs.opencv.org/4.3.0/d1/d1b/group__core__hal__interface.html\"\n                    },\n                    \"rows\": {\n                      \"description\": \"Number of rows in the matrix.\",\n                      \"format\": \"int32\",\n                      \"type\": \"integer\"\n                    },\n                    \"data\": {\n                      \"description\": \"The matrix data.\",\n                      \"type\": \"string\",\n                      \"format\": \"byte\"\n                    }\n                  }\n                }\n              },\n              \"formFields\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected form fields on the page.\",\n                \"items\": {\n                  \"description\": \"A form field detected on the page.\",\n                  \"properties\": {\n                    \"fieldValue\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"fieldName\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"correctedKeyText\": {\n                      \"description\": \"Created for Labeling UI to export key text. If corrections were made to the text identified by the `field_name.text_anchor`, this field will contain the correction.\",\n                      \"type\": \"string\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"correctedValueText\": {\n                      \"description\": \"Created for Labeling UI to export value text. If corrections were made to the text identified by the `field_value.text_anchor`, this field will contain the correction.\",\n                      \"type\": \"string\"\n                    },\n                    \"valueDetectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages for value together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"valueType\": {\n                      \"type\": \"string\",\n                      \"description\": \"If the value is non-textual, this field represents the type. Current valid values are: - blank (this indicates the `field_value` is normal text) - `unfilled_checkbox` - `filled_checkbox`\"\n                    },\n                    \"nameDetectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages for name together with confidence.\",\n                      \"type\": \"array\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              },\n              \"symbols\": {\n                \"description\": \"A list of visually detected symbols on the page.\",\n                \"items\": {\n                  \"properties\": {\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"type\": \"array\"\n                    }\n                  },\n                  \"description\": \"A detected symbol.\",\n                  \"type\": \"object\"\n                },\n                \"type\": \"array\"\n              },\n              \"tables\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected tables on the page.\",\n                \"items\": {\n                  \"description\": \"A table representation similar to HTML table structure.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"type\": \"array\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"bodyRows\": {\n                      \"description\": \"Body rows of the table.\",\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"description\": \"A row of table cells.\",\n                        \"properties\": {\n                          \"cells\": {\n                            \"items\": {\n                              \"properties\": {\n                                \"colSpan\": {\n                                  \"type\": \"integer\",\n                                  \"description\": \"How many columns this cell spans.\",\n                                  \"format\": \"int32\"\n                                },\n                                \"detectedLanguages\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"A list of detected languages together with confidence.\",\n                                  \"items\": {\n                                    \"description\": \"Detected language for a structural component.\",\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                      \"confidence\": {\n                                        \"format\": \"float\",\n                                        \"type\": \"number\",\n                                        \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                                      },\n                                      \"languageCode\": {\n                                        \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    }\n                                  }\n                                },\n                                \"layout\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"confidence\": {\n                                      \"format\": \"float\",\n                                      \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                                      \"type\": \"number\"\n                                    },\n                                    \"orientation\": {\n                                      \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                                      \"type\": \"string\",\n                                      \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                                      \"description\": \"Detected orientation for the Layout.\"\n                                    },\n                                    \"boundingPoly\": {\n                                      \"properties\": {\n                                        \"normalizedVertices\": {\n                                          \"description\": \"The bounding polygon normalized vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        },\n                                        \"vertices\": {\n                                          \"description\": \"The bounding polygon vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        }\n                                      },\n                                      \"type\": \"object\",\n                                      \"description\": \"A bounding polygon for the detected image annotation.\"\n                                    },\n                                    \"textAnchor\": {\n                                      \"properties\": {\n                                        \"content\": {\n                                          \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                                          \"type\": \"string\"\n                                        },\n                                        \"textSegments\": {\n                                          \"items\": {\n                                          },\n                                          \"type\": \"array\",\n                                          \"description\": \"The text segments from the Document.text.\"\n                                        }\n                                      },\n                                      \"description\": \"Text reference indexing into the Document.text.\",\n                                      \"type\": \"object\"\n                                    }\n                                  },\n                                  \"description\": \"Visual element describing a layout unit on a page.\"\n                                },\n                                \"rowSpan\": {\n                                  \"format\": \"int32\",\n                                  \"description\": \"How many rows this cell spans.\",\n                                  \"type\": \"integer\"\n                                }\n                              },\n                              \"description\": \"A cell representation inside the table.\",\n                              \"type\": \"object\"\n                            },\n                            \"description\": \"Cells that make up this row.\",\n                            \"type\": \"array\"\n                          }\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"headerRows\": {\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"description\": \"A row of table cells.\",\n                        \"properties\": {\n                          \"cells\": {\n                            \"items\": {\n                              \"properties\": {\n                                \"colSpan\": {\n                                  \"type\": \"integer\",\n                                  \"description\": \"How many columns this cell spans.\",\n                                  \"format\": \"int32\"\n                                },\n                                \"detectedLanguages\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"A list of detected languages together with confidence.\",\n                                  \"items\": {\n                                    \"description\": \"Detected language for a structural component.\",\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                      \"confidence\": {\n                                        \"format\": \"float\",\n                                        \"type\": \"number\",\n                                        \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                                      },\n                                      \"languageCode\": {\n                                        \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    }\n                                  }\n                                },\n                                \"layout\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"confidence\": {\n                                      \"format\": \"float\",\n                                      \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                                      \"type\": \"number\"\n                                    },\n                                    \"orientation\": {\n                                      \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                                      \"type\": \"string\",\n                                      \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                                      \"description\": \"Detected orientation for the Layout.\"\n                                    },\n                                    \"boundingPoly\": {\n                                      \"properties\": {\n                                        \"normalizedVertices\": {\n                                          \"description\": \"The bounding polygon normalized vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        },\n                                        \"vertices\": {\n                                          \"description\": \"The bounding polygon vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        }\n                                      },\n                                      \"type\": \"object\",\n                                      \"description\": \"A bounding polygon for the detected image annotation.\"\n                                    },\n                                    \"textAnchor\": {\n                                      \"properties\": {\n                                        \"content\": {\n                                          \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                                          \"type\": \"string\"\n                                        },\n                                        \"textSegments\": {\n                                          \"items\": {\n                                          },\n                                          \"type\": \"array\",\n                                          \"description\": \"The text segments from the Document.text.\"\n                                        }\n                                      },\n                                      \"description\": \"Text reference indexing into the Document.text.\",\n                                      \"type\": \"object\"\n                                    }\n                                  },\n                                  \"description\": \"Visual element describing a layout unit on a page.\"\n                                },\n                                \"rowSpan\": {\n                                  \"format\": \"int32\",\n                                  \"description\": \"How many rows this cell spans.\",\n                                  \"type\": \"integer\"\n                                }\n                              },\n                              \"description\": \"A cell representation inside the table.\",\n                              \"type\": \"object\"\n                            },\n                            \"description\": \"Cells that make up this row.\",\n                            \"type\": \"array\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"Header rows of the table.\"\n                    }\n                  }\n                }\n              },\n              \"blocks\": {\n                \"description\": \"A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"description\": \"A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    }\n                  }\n                }\n              },\n              \"visualElements\": {\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"type\": {\n                      \"description\": \"Type of the VisualElement.\",\n                      \"type\": \"string\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    }\n                  },\n                  \"description\": \"Detected non-text visual elements e.g. checkbox, signature etc. on the page.\"\n                },\n                \"description\": \"A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.\",\n                \"type\": \"array\"\n              },\n              \"imageQualityScores\": {\n                \"description\": \"Image Quality Scores for the page image.\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"qualityScore\": {\n                    \"description\": \"The overall quality score. Range `[0, 1]` where `1` is perfect quality.\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"detectedDefects\": {\n                    \"items\": {\n                      \"description\": \"Image Quality Defects\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"type\": \"number\",\n                          \"description\": \"Confidence of detected defect. Range `[0, 1]` where `1` indicates strong confidence of that the defect exists.\",\n                          \"format\": \"float\"\n                        },\n                        \"type\": {\n                          \"description\": \"Name of the defect type. Supported values are: - `quality/defect_blurry` - `quality/defect_noisy` - `quality/defect_dark` - `quality/defect_faint` - `quality/defect_text_too_small` - `quality/defect_document_cutoff` - `quality/defect_text_cutoff` - `quality/defect_glare`\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\",\n                    \"description\": \"A list of detected defects.\"\n                  }\n                }\n              },\n              \"tokens\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    },\n                    \"detectedBreak\": {\n                      \"properties\": {\n                        \"type\": {\n                          \"enumDescriptions\": [\"Unspecified break type.\", \"A single whitespace.\", \"A wider whitespace.\", \"A hyphen that indicates that a token has been split across lines.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"TYPE_UNSPECIFIED\", \"SPACE\", \"WIDE_SPACE\", \"HYPHEN\"],\n                          \"description\": \"Detected break type.\"\n                        }\n                      },\n                      \"description\": \"Detected break at the end of a Token.\",\n                      \"type\": \"object\"\n                    },\n                    \"styleInfo\": {\n                      \"type\": \"object\",\n                      \"description\": \"Font and other text style attributes.\",\n                      \"properties\": {\n                        \"bold\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is bold (equivalent to font_weight is at least `700`).\"\n                        },\n                        \"strikeout\": {\n                          \"description\": \"Whether the text is strikethrough.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"letterSpacing\": {\n                          \"type\": \"number\",\n                          \"description\": \"Letter spacing in points.\",\n                          \"format\": \"double\"\n                        },\n                        \"textColor\": {\n                          \"properties\": {\n                            \"blue\": {\n                              \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            },\n                            \"green\": {\n                              \"type\": \"number\",\n                              \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\"\n                            },\n                            \"alpha\": {\n                              \"type\": \"number\",\n                              \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                              \"format\": \"float\"\n                            },\n                            \"red\": {\n                              \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            }\n                          },\n                          \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                          \"type\": \"object\"\n                        },\n                        \"backgroundColor\": {\n                          \"properties\": {\n                            \"blue\": {\n                              \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            },\n                            \"green\": {\n                              \"type\": \"number\",\n                              \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\"\n                            },\n                            \"alpha\": {\n                              \"type\": \"number\",\n                              \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                              \"format\": \"float\"\n                            },\n                            \"red\": {\n                              \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            }\n                          },\n                          \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                          \"type\": \"object\"\n                        },\n                        \"fontWeight\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int32\",\n                          \"description\": \"TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy). Normal is `400`, bold is `700`.\"\n                        },\n                        \"italic\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is italic.\"\n                        },\n                        \"pixelFontSize\": {\n                          \"format\": \"double\",\n                          \"type\": \"number\",\n                          \"description\": \"Font size in pixels, equal to _unrounded font_size_ * _resolution_ ÷ `72.0`.\"\n                        },\n                        \"smallcaps\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is in small caps.\"\n                        },\n                        \"superscript\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is a superscript.\"\n                        },\n                        \"underlined\": {\n                          \"description\": \"Whether the text is underlined.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"fontType\": {\n                          \"type\": \"string\",\n                          \"description\": \"Name or style of the font.\"\n                        },\n                        \"subscript\": {\n                          \"description\": \"Whether the text is a subscript.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"handwritten\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is handwritten.\"\n                        },\n                        \"fontSize\": {\n                          \"description\": \"Font size in points (`1` point is `¹⁄₇₂` inches).\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"type\": \"object\",\n                  \"description\": \"A detected token.\"\n                },\n                \"description\": \"A list of visually detected tokens on the page.\"\n              },\n              \"detectedBarcodes\": {\n                \"description\": \"A list of detected barcodes.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"barcode\": {\n                      \"description\": \"Encodes the detailed information of a barcode.\",\n                      \"properties\": {\n                        \"valueFormat\": {\n                          \"type\": \"string\",\n                          \"description\": \"Value format describes the format of the value that a barcode encodes. The supported formats are: - `CONTACT_INFO`: Contact information. - `EMAIL`: Email address. - `ISBN`: ISBN identifier. - `PHONE`: Phone number. - `PRODUCT`: Product. - `SMS`: SMS message. - `TEXT`: Text string. - `URL`: URL address. - `WIFI`: Wifi information. - `GEO`: Geo-localization. - `CALENDAR_EVENT`: Calendar event. - `DRIVER_LICENSE`: Driver\\u0027s license.\"\n                        },\n                        \"rawValue\": {\n                          \"type\": \"string\",\n                          \"description\": \"Raw value encoded in the barcode. For example: `\\u0027MEBKM:TITLE:Google;URL:https://www.google.com;;\\u0027`.\"\n                        },\n                        \"format\": {\n                          \"description\": \"Format of a barcode. The supported formats are: - `CODE_128`: Code 128 type. - `CODE_39`: Code 39 type. - `CODE_93`: Code 93 type. - `CODABAR`: Codabar type. - `DATA_MATRIX`: 2D Data Matrix type. - `ITF`: ITF type. - `EAN_13`: EAN-13 type. - `EAN_8`: EAN-8 type. - `QR_CODE`: 2D QR code type. - `UPC_A`: UPC-A type. - `UPC_E`: UPC-E type. - `PDF417`: PDF417 type. - `AZTEC`: 2D Aztec code type. - `DATABAR`: GS1 DataBar code type.\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A detected barcode.\",\n                  \"type\": \"object\"\n                }\n              },\n              \"paragraphs\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A collection of lines that a human would perceive as a paragraph.\"\n                }\n              },\n              \"provenance\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"revision\": {\n                    \"description\": \"The index of the revision that produced this element.\",\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                  },\n                  \"id\": {\n                    \"format\": \"int32\",\n                    \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                    \"type\": \"integer\"\n                  },\n                  \"parents\": {\n                    \"description\": \"References to the original elements that are replaced.\",\n                    \"items\": {\n                      \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"description\": \"The id of the parent provenance.\",\n                          \"format\": \"int32\"\n                        },\n                        \"revision\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                          \"type\": \"integer\"\n                        },\n                        \"index\": {\n                          \"format\": \"int32\",\n                          \"type\": \"integer\",\n                          \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"type\": {\n                    \"description\": \"The type of provenance operation.\",\n                    \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                    \"type\": \"string\",\n                    \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                  }\n                },\n                \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n              },\n              \"detectedLanguages\": {\n                \"items\": {\n                  \"description\": \"Detected language for a structural component.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"confidence\": {\n                      \"format\": \"float\",\n                      \"type\": \"number\",\n                      \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                    },\n                    \"languageCode\": {\n                      \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"type\": \"array\",\n                \"description\": \"A list of detected languages together with confidence.\"\n              },\n              \"image\": {\n                \"properties\": {\n                  \"width\": {\n                    \"format\": \"int32\",\n                    \"description\": \"Width of the image in pixels.\",\n                    \"type\": \"integer\"\n                  },\n                  \"height\": {\n                    \"format\": \"int32\",\n                    \"description\": \"Height of the image in pixels.\",\n                    \"type\": \"integer\"\n                  },\n                  \"mimeType\": {\n                    \"type\": \"string\",\n                    \"description\": \"Encoding [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml) for the image.\"\n                  },\n                  \"content\": {\n                    \"type\": \"string\",\n                    \"description\": \"Raw byte content of the image.\",\n                    \"format\": \"byte\"\n                  }\n                },\n                \"type\": \"object\",\n                \"description\": \"Rendered image contents for this page.\"\n              },\n              \"dimension\": {\n                \"properties\": {\n                  \"height\": {\n                    \"description\": \"Page height.\",\n                    \"type\": \"number\",\n                    \"format\": \"float\"\n                  },\n                  \"unit\": {\n                    \"description\": \"Dimension unit.\",\n                    \"type\": \"string\"\n                  },\n                  \"width\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\",\n                    \"description\": \"Page width.\"\n                  }\n                },\n                \"description\": \"Dimension for the page.\",\n                \"type\": \"object\"\n              },\n              \"lines\": {\n                \"description\": \"A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                              },\n                              \"index\": {\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A collection of tokens that a human would perceive as a line. Does not cross column boundaries, can be horizontal, vertical, etc.\",\n                  \"type\": \"object\"\n                }\n              },\n              \"layout\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"confidence\": {\n                    \"format\": \"float\",\n                    \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                    \"type\": \"number\"\n                  },\n                  \"orientation\": {\n                    \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                    \"type\": \"string\",\n                    \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                    \"description\": \"Detected orientation for the Layout.\"\n                  },\n                  \"boundingPoly\": {\n                    \"properties\": {\n                      \"normalizedVertices\": {\n                        \"description\": \"The bounding polygon normalized vertices.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                        }\n                      },\n                      \"vertices\": {\n                        \"description\": \"The bounding polygon vertices.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                        }\n                      }\n                    },\n                    \"type\": \"object\",\n                    \"description\": \"A bounding polygon for the detected image annotation.\"\n                  },\n                  \"textAnchor\": {\n                    \"properties\": {\n                      \"content\": {\n                        \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                        \"type\": \"string\"\n                      },\n                      \"textSegments\": {\n                        \"items\": {\n                        },\n                        \"type\": \"array\",\n                        \"description\": \"The text segments from the Document.text.\"\n                      }\n                    },\n                    \"description\": \"Text reference indexing into the Document.text.\",\n                    \"type\": \"object\"\n                  }\n                },\n                \"description\": \"Visual element describing a layout unit on a page.\"\n              },\n              \"pageNumber\": {\n                \"description\": \"1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.\",\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          },\n          \"description\": \"Visual page layout for the Document.\"\n        },\n        \"content\": {\n          \"type\": \"string\",\n          \"format\": \"byte\",\n          \"description\": \"Optional. Inline document content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64.\"\n        },\n        \"shardInfo\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"textOffset\": {\n              \"type\": \"string\",\n              \"description\": \"The index of the first character in Document.text in the overall document global text.\",\n              \"format\": \"int64\"\n            },\n            \"shardIndex\": {\n              \"description\": \"The 0-based index of this shard.\",\n              \"type\": \"string\",\n              \"format\": \"int64\"\n            },\n            \"shardCount\": {\n              \"description\": \"Total number of shards.\",\n              \"type\": \"string\",\n              \"format\": \"int64\"\n            }\n          },\n          \"description\": \"For a large document, sharding may be performed to produce several document shards. Each document shard contains this field to detail which shard it is.\"\n        },\n        \"textStyles\": {\n          \"type\": \"array\",\n          \"description\": \"Styles for the Document.text.\",\n          \"items\": {\n            \"description\": \"Annotation for common text style attributes. This adheres to CSS conventions as much as possible.\",\n            \"properties\": {\n              \"fontFamily\": {\n                \"description\": \"Font family such as `Arial`, `Times New Roman`. https://www.w3schools.com/cssref/pr_font_font-family.asp\",\n                \"type\": \"string\"\n              },\n              \"fontWeight\": {\n                \"type\": \"string\",\n                \"description\": \"[Font weight](https://www.w3schools.com/cssref/pr_font_weight.asp). Possible values are `normal`, `bold`, `bolder`, and `lighter`.\"\n              },\n              \"color\": {\n                \"properties\": {\n                  \"blue\": {\n                    \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"green\": {\n                    \"type\": \"number\",\n                    \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\"\n                  },\n                  \"alpha\": {\n                    \"type\": \"number\",\n                    \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                    \"format\": \"float\"\n                  },\n                  \"red\": {\n                    \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  }\n                },\n                \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                \"type\": \"object\"\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"textDecoration\": {\n                \"type\": \"string\",\n                \"description\": \"[Text decoration](https://www.w3schools.com/cssref/pr_text_text-decoration.asp). Follows CSS standard. \"\n              },\n              \"fontSize\": {\n                \"properties\": {\n                  \"size\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\",\n                    \"description\": \"Font size for the text.\"\n                  },\n                  \"unit\": {\n                    \"description\": \"Unit for the font size. Follows CSS naming (`in`, `px`, `pt`, etc.).\",\n                    \"type\": \"string\"\n                  }\n                },\n                \"description\": \"Font size with unit.\",\n                \"type\": \"object\"\n              },\n              \"backgroundColor\": {\n                \"properties\": {\n                  \"blue\": {\n                    \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"green\": {\n                    \"type\": \"number\",\n                    \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\"\n                  },\n                  \"alpha\": {\n                    \"type\": \"number\",\n                    \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                    \"format\": \"float\"\n                  },\n                  \"red\": {\n                    \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  }\n                },\n                \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                \"type\": \"object\"\n              },\n              \"textStyle\": {\n                \"type\": \"string\",\n                \"description\": \"[Text style](https://www.w3schools.com/cssref/pr_font_font-style.asp). Possible values are `normal`, `italic`, and `oblique`.\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"entities\": {\n          \"description\": \"A list of entities detected on Document.text. For document shards, entities in this list may cross shard boundaries.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n            \"properties\": {\n              \"provenance\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"revision\": {\n                  },\n                  \"id\": {\n                    \"format\": \"int32\",\n                    \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                    \"type\": \"integer\"\n                  },\n                  \"parents\": {\n                  },\n                  \"type\": {\n                  }\n                },\n                \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n              },\n              \"pageAnchor\": {\n                \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"pageRefs\": {\n                  }\n                }\n              },\n              \"mentionId\": {\n                \"type\": \"string\",\n                \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n              },\n              \"normalizedValue\": {\n                \"properties\": {\n                  \"datetimeValue\": {\n                  },\n                  \"integerValue\": {\n                  },\n                  \"addressValue\": {\n                  },\n                  \"dateValue\": {\n                  },\n                  \"floatValue\": {\n                  },\n                  \"booleanValue\": {\n                  },\n                  \"moneyValue\": {\n                  },\n                  \"text\": {\n                  }\n                },\n                \"type\": \"object\",\n                \"description\": \"Parsed and normalized entity value.\"\n              },\n              \"confidence\": {\n                \"type\": \"number\",\n                \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                \"format\": \"float\"\n              },\n              \"properties\": {\n                \"type\": \"array\",\n                \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                \"items\": {\n                  \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                        },\n                        \"type\": {\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"pageAnchor\": {\n                      \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"pageRefs\": {\n                        }\n                      }\n                    },\n                    \"mentionId\": {\n                      \"type\": \"string\",\n                      \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                    },\n                    \"normalizedValue\": {\n                      \"properties\": {\n                        \"datetimeValue\": {\n                        },\n                        \"integerValue\": {\n                        },\n                        \"addressValue\": {\n                        },\n                        \"dateValue\": {\n                        },\n                        \"floatValue\": {\n                        },\n                        \"booleanValue\": {\n                        },\n                        \"moneyValue\": {\n                        },\n                        \"text\": {\n                        }\n                      },\n                      \"type\": \"object\",\n                      \"description\": \"Parsed and normalized entity value.\"\n                    },\n                    \"confidence\": {\n                      \"type\": \"number\",\n                      \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                      \"format\": \"float\"\n                    },\n                    \"properties\": {\n                      \"type\": \"array\",\n                      \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                      \"items\": {\n                        \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                        \"properties\": {\n                          \"provenance\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"revision\": {\n                              },\n                              \"id\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                \"type\": \"integer\"\n                              },\n                              \"parents\": {\n                              },\n                              \"type\": {\n                              }\n                            },\n                            \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                          },\n                          \"pageAnchor\": {\n                            \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"pageRefs\": {\n                              }\n                            }\n                          },\n                          \"mentionId\": {\n                            \"type\": \"string\",\n                            \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                          },\n                          \"normalizedValue\": {\n                            \"properties\": {\n                              \"datetimeValue\": {\n                              },\n                              \"integerValue\": {\n                              },\n                              \"addressValue\": {\n                              },\n                              \"dateValue\": {\n                              },\n                              \"floatValue\": {\n                              },\n                              \"booleanValue\": {\n                              },\n                              \"moneyValue\": {\n                              },\n                              \"text\": {\n                              }\n                            },\n                            \"type\": \"object\",\n                            \"description\": \"Parsed and normalized entity value.\"\n                          },\n                          \"confidence\": {\n                            \"type\": \"number\",\n                            \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                            \"format\": \"float\"\n                          },\n                          \"properties\": {\n                            \"type\": \"array\",\n                            \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                            \"items\": {\n                              \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                              \"properties\": {\n                                \"provenance\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"revision\": {\n                                    },\n                                    \"id\": {\n                                      \"format\": \"int32\",\n                                      \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                      \"type\": \"integer\"\n                                    },\n                                    \"parents\": {\n                                    },\n                                    \"type\": {\n                                    }\n                                  },\n                                  \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                                },\n                                \"pageAnchor\": {\n                                  \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"pageRefs\": {\n                                    }\n                                  }\n                                },\n                                \"mentionId\": {\n                                  \"type\": \"string\",\n                                  \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                                },\n                                \"normalizedValue\": {\n                                  \"properties\": {\n                                    \"datetimeValue\": {\n                                    },\n                                    \"integerValue\": {\n                                    },\n                                    \"addressValue\": {\n                                    },\n                                    \"dateValue\": {\n                                    },\n                                    \"floatValue\": {\n                                    },\n                                    \"booleanValue\": {\n                                    },\n                                    \"moneyValue\": {\n                                    },\n                                    \"text\": {\n                                    }\n                                  },\n                                  \"type\": \"object\",\n                                  \"description\": \"Parsed and normalized entity value.\"\n                                },\n                                \"confidence\": {\n                                  \"type\": \"number\",\n                                  \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                                  \"format\": \"float\"\n                                },\n                                \"properties\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                                  \"items\": {\n                                    \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                                    \"properties\": {\n                                      \"provenance\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                          \"revision\": {\n                                          },\n                                          \"id\": {\n                                            \"format\": \"int32\",\n                                            \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                            \"type\": \"integer\"\n                                          },\n                                          \"parents\": {\n                                          },\n                                          \"type\": {\n                                          }\n                                        },\n                                        \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                                      },\n                                      \"pageAnchor\": {\n                                        \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                          \"pageRefs\": {\n                                          }\n                                        }\n                                      },\n                                      \"mentionId\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                                      },\n                                      \"normalizedValue\": {\n                                        \"properties\": {\n                                          \"datetimeValue\": {\n                                          },\n                                          \"integerValue\": {\n                                          },\n                                          \"addressValue\": {\n                                          },\n                                          \"dateValue\": {\n                                          },\n                                          \"floatValue\": {\n                                          },\n                                          \"booleanValue\": {\n                                          },\n                                          \"moneyValue\": {\n                                          },\n                                          \"text\": {\n                                          }\n                                        },\n                                        \"type\": \"object\",\n                                        \"description\": \"Parsed and normalized entity value.\"\n                                      },\n                                      \"confidence\": {\n                                        \"type\": \"number\",\n                                        \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                                        \"format\": \"float\"\n                                      },\n                                      \"properties\": {\n                                        \"type\": \"array\",\n                                        \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                                        \"items\": {\n                                          \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                                          \"properties\": {\n                                          },\n                                          \"type\": \"object\"\n                                        }\n                                      },\n                                      \"mentionText\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                                      },\n                                      \"id\": {\n                                        \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                                        \"type\": \"string\"\n                                      },\n                                      \"redacted\": {\n                                        \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                                        \"type\": \"boolean\"\n                                      },\n                                      \"textAnchor\": {\n                                        \"properties\": {\n                                          \"content\": {\n                                          },\n                                          \"textSegments\": {\n                                          }\n                                        },\n                                        \"description\": \"Text reference indexing into the Document.text.\",\n                                        \"type\": \"object\"\n                                      },\n                                      \"type\": {\n                                        \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    },\n                                    \"type\": \"object\"\n                                  }\n                                },\n                                \"mentionText\": {\n                                  \"type\": \"string\",\n                                  \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                                },\n                                \"id\": {\n                                  \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                                  \"type\": \"string\"\n                                },\n                                \"redacted\": {\n                                  \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                                  \"type\": \"boolean\"\n                                },\n                                \"textAnchor\": {\n                                  \"properties\": {\n                                    \"content\": {\n                                    },\n                                    \"textSegments\": {\n                                    }\n                                  },\n                                  \"description\": \"Text reference indexing into the Document.text.\",\n                                  \"type\": \"object\"\n                                },\n                                \"type\": {\n                                  \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                                  \"type\": \"string\"\n                                }\n                              },\n                              \"type\": \"object\"\n                            }\n                          },\n                          \"mentionText\": {\n                            \"type\": \"string\",\n                            \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                          },\n                          \"id\": {\n                            \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                            \"type\": \"string\"\n                          },\n                          \"redacted\": {\n                            \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                            \"type\": \"boolean\"\n                          },\n                          \"textAnchor\": {\n                            \"properties\": {\n                              \"content\": {\n                              },\n                              \"textSegments\": {\n                              }\n                            },\n                            \"description\": \"Text reference indexing into the Document.text.\",\n                            \"type\": \"object\"\n                          },\n                          \"type\": {\n                            \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"type\": \"object\"\n                      }\n                    },\n                    \"mentionText\": {\n                      \"type\": \"string\",\n                      \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                    },\n                    \"id\": {\n                      \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                      \"type\": \"string\"\n                    },\n                    \"redacted\": {\n                      \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                      \"type\": \"boolean\"\n                    },\n                    \"textAnchor\": {\n                      \"properties\": {\n                        \"content\": {\n                        },\n                        \"textSegments\": {\n                        }\n                      },\n                      \"description\": \"Text reference indexing into the Document.text.\",\n                      \"type\": \"object\"\n                    },\n                    \"type\": {\n                      \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              },\n              \"mentionText\": {\n                \"type\": \"string\",\n                \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n              },\n              \"id\": {\n                \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                \"type\": \"string\"\n              },\n              \"redacted\": {\n                \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                \"type\": \"boolean\"\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"type\": {\n                \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                \"type\": \"string\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"textChanges\": {\n          \"type\": \"array\",\n          \"description\": \"Placeholder. A list of text corrections made to Document.text. This is usually used for annotating corrections to OCR mistakes. Text changes for a given revision may not overlap with each other.\",\n          \"items\": {\n            \"description\": \"This message is used for text changes aka. OCR corrections.\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"provenance\": {\n                \"description\": \"The history of this annotation.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"revision\": {\n                      \"description\": \"The index of the revision that produced this element.\",\n                      \"type\": \"integer\",\n                      \"format\": \"int32\"\n                    },\n                    \"id\": {\n                      \"format\": \"int32\",\n                      \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                      \"type\": \"integer\"\n                    },\n                    \"parents\": {\n                      \"description\": \"References to the original elements that are replaced.\",\n                      \"items\": {\n                        \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"integer\",\n                            \"description\": \"The id of the parent provenance.\",\n                            \"format\": \"int32\"\n                          },\n                          \"revision\": {\n                          },\n                          \"index\": {\n                          }\n                        },\n                        \"type\": \"object\"\n                      },\n                      \"type\": \"array\"\n                    },\n                    \"type\": {\n                      \"description\": \"The type of provenance operation.\",\n                      \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                      \"type\": \"string\",\n                      \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                    }\n                  },\n                  \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                }\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"changedText\": {\n                \"type\": \"string\",\n                \"description\": \"The text that replaces the text identified in the `text_anchor`.\"\n              }\n            }\n          }\n        },\n        \"uri\": {\n          \"type\": \"string\",\n          \"description\": \"Optional. Currently supports Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. For more information, refer to [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris).\"\n        },\n        \"text\": {\n          \"type\": \"string\",\n          \"description\": \"Optional. UTF-8 encoded text in reading order from the document.\"\n        },\n        \"entityRelations\": {\n          \"description\": \"Placeholder. Relationship among Document.entities.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"Relationship between Entities.\",\n            \"properties\": {\n              \"subjectId\": {\n                \"description\": \"Subject entity id.\",\n                \"type\": \"string\"\n              },\n              \"relation\": {\n                \"description\": \"Relationship description.\",\n                \"type\": \"string\"\n              },\n              \"objectId\": {\n                \"type\": \"string\",\n                \"description\": \"Object entity id.\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"mimeType\": {\n          \"description\": \"An IANA published [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml).\",\n          \"type\": \"string\"\n        },\n        \"error\": {\n          \"properties\": {\n            \"message\": {\n              \"description\": \"A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.\",\n              \"type\": \"string\"\n            },\n            \"details\": {\n              \"items\": {\n                \"additionalProperties\": {\n                  \"type\": \"any\",\n                  \"description\": \"Properties of the object. Contains field @type with type URL.\"\n                },\n                \"type\": \"object\"\n              },\n              \"description\": \"A list of messages that carry the error details. There is a common set of message types for APIs to use.\",\n              \"type\": \"array\"\n            },\n            \"code\": {\n              \"type\": \"integer\",\n              \"description\": \"The status code, which should be an enum value of google.rpc.Code.\",\n              \"format\": \"int32\"\n            }\n          },\n          \"type\": \"object\",\n          \"description\": \"The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).\"\n        }\n      },\n      \"type\": \"object\",\n      \"description\": \"Document represents the canonical document resource in Document AI. It is an interchange format that provides insights into documents and allows for collaboration between users and Document AI to iterate and optimize for quality.\"\n    },\n    \"fieldMask\": {\n      \"description\": \"Specifies which fields to include in the ProcessResponse.document output. Only supports top-level document and pages field, so it must be in the form of `{document_field_name}` or `pages.{page_field_name}`.\",\n      \"format\": \"google-fieldmask\",\n      \"type\": \"string\"\n    }\n  }\n}"
  }, {
    "key": "`Task_18_response`",
    "dataType": "JSON_VALUE",
    "displayName": "`Task_18_response`",
    "isTransient": true,
    "producer": "1_18",
    "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"humanReviewStatus\": {\n      \"properties\": {\n        \"state\": {\n          \"type\": \"string\",\n          \"enumDescriptions\": [\"Human review state is unspecified. Most likely due to an internal error.\", \"Human review is skipped for the document. This can happen because human review isn\\u0027t enabled on the processor or the processing request has been set to skip this document.\", \"Human review validation is triggered and passed, so no review is needed.\", \"Human review validation is triggered and the document is under review.\", \"Some error happened during triggering human review, see the state_message for details.\"],\n          \"description\": \"The state of human review on the processing request.\",\n          \"enum\": [\"STATE_UNSPECIFIED\", \"SKIPPED\", \"VALIDATION_PASSED\", \"IN_PROGRESS\", \"ERROR\"]\n        },\n        \"stateMessage\": {\n          \"description\": \"A message providing more details about the human review state.\",\n          \"type\": \"string\"\n        },\n        \"humanReviewOperation\": {\n          \"description\": \"The name of the operation triggered by the processed document. This field is populated only when the state is `HUMAN_REVIEW_IN_PROGRESS`. It has the same response type and metadata as the long-running operation returned by ReviewDocument.\",\n          \"type\": \"string\"\n        }\n      },\n      \"description\": \"The status of human review on a processed document.\",\n      \"type\": \"object\"\n    },\n    \"document\": {\n      \"properties\": {\n        \"revisions\": {\n          \"description\": \"Placeholder. Revision history of this document.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"description\": \"Contains past or forward revisions of this document.\",\n            \"properties\": {\n              \"agent\": {\n                \"type\": \"string\",\n                \"description\": \"If the change was made by a person specify the name or id of that person.\"\n              },\n              \"createTime\": {\n                \"format\": \"google-datetime\",\n                \"description\": \"The time that the revision was created, internally generated by doc proto storage at the time of create.\",\n                \"type\": \"string\"\n              },\n              \"humanReview\": {\n                \"description\": \"Human Review information of the document.\",\n                \"properties\": {\n                  \"stateMessage\": {\n                    \"description\": \"A message providing more details about the current state of processing. For example, the rejection reason when the state is `rejected`.\",\n                    \"type\": \"string\"\n                  },\n                  \"state\": {\n                    \"description\": \"Human review state. e.g. `requested`, `succeeded`, `rejected`.\",\n                    \"type\": \"string\"\n                  }\n                },\n                \"type\": \"object\"\n              },\n              \"parentIds\": {\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"array\",\n                \"description\": \"The revisions that this revision is based on. Must include all the ids that have anything to do with this revision - eg. there are `provenance.parent.revision` fields that index into this field.\"\n              },\n              \"parent\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"format\": \"int32\",\n                  \"type\": \"integer\"\n                },\n                \"description\": \"The revisions that this revision is based on. This can include one or more parent (when documents are merged.) This field represents the index into the `revisions` field.\"\n              },\n              \"id\": {\n                \"description\": \"Id of the revision, internally generated by doc proto storage. Unique within the context of the document.\",\n                \"type\": \"string\"\n              },\n              \"processor\": {\n                \"type\": \"string\",\n                \"description\": \"If the annotation was made by processor identify the processor by its resource name.\"\n              }\n            }\n          }\n        },\n        \"pages\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"A page in a Document.\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"transforms\": {\n                \"type\": \"array\",\n                \"description\": \"Transformation matrices that were applied to the original document image to produce Page.image.\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"description\": \"Representation for transformation matrix, intended to be compatible and used with OpenCV format for image manipulation.\",\n                  \"properties\": {\n                    \"cols\": {\n                      \"format\": \"int32\",\n                      \"type\": \"integer\",\n                      \"description\": \"Number of columns in the matrix.\"\n                    },\n                    \"type\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\",\n                      \"description\": \"This encodes information about what data type the matrix uses. For example, 0 (CV_8U) is an unsigned 8-bit image. For the full list of OpenCV primitive data types, please refer to https://docs.opencv.org/4.3.0/d1/d1b/group__core__hal__interface.html\"\n                    },\n                    \"rows\": {\n                      \"description\": \"Number of rows in the matrix.\",\n                      \"format\": \"int32\",\n                      \"type\": \"integer\"\n                    },\n                    \"data\": {\n                      \"description\": \"The matrix data.\",\n                      \"type\": \"string\",\n                      \"format\": \"byte\"\n                    }\n                  }\n                }\n              },\n              \"formFields\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected form fields on the page.\",\n                \"items\": {\n                  \"description\": \"A form field detected on the page.\",\n                  \"properties\": {\n                    \"fieldValue\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"fieldName\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"correctedKeyText\": {\n                      \"description\": \"Created for Labeling UI to export key text. If corrections were made to the text identified by the `field_name.text_anchor`, this field will contain the correction.\",\n                      \"type\": \"string\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"correctedValueText\": {\n                      \"description\": \"Created for Labeling UI to export value text. If corrections were made to the text identified by the `field_value.text_anchor`, this field will contain the correction.\",\n                      \"type\": \"string\"\n                    },\n                    \"valueDetectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages for value together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"valueType\": {\n                      \"type\": \"string\",\n                      \"description\": \"If the value is non-textual, this field represents the type. Current valid values are: - blank (this indicates the `field_value` is normal text) - `unfilled_checkbox` - `filled_checkbox`\"\n                    },\n                    \"nameDetectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages for name together with confidence.\",\n                      \"type\": \"array\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              },\n              \"symbols\": {\n                \"description\": \"A list of visually detected symbols on the page.\",\n                \"items\": {\n                  \"properties\": {\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"type\": \"array\"\n                    }\n                  },\n                  \"description\": \"A detected symbol.\",\n                  \"type\": \"object\"\n                },\n                \"type\": \"array\"\n              },\n              \"tables\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected tables on the page.\",\n                \"items\": {\n                  \"description\": \"A table representation similar to HTML table structure.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"type\": \"array\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"bodyRows\": {\n                      \"description\": \"Body rows of the table.\",\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"description\": \"A row of table cells.\",\n                        \"properties\": {\n                          \"cells\": {\n                            \"items\": {\n                              \"properties\": {\n                                \"colSpan\": {\n                                  \"type\": \"integer\",\n                                  \"description\": \"How many columns this cell spans.\",\n                                  \"format\": \"int32\"\n                                },\n                                \"detectedLanguages\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"A list of detected languages together with confidence.\",\n                                  \"items\": {\n                                    \"description\": \"Detected language for a structural component.\",\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                      \"confidence\": {\n                                        \"format\": \"float\",\n                                        \"type\": \"number\",\n                                        \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                                      },\n                                      \"languageCode\": {\n                                        \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    }\n                                  }\n                                },\n                                \"layout\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"confidence\": {\n                                      \"format\": \"float\",\n                                      \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                                      \"type\": \"number\"\n                                    },\n                                    \"orientation\": {\n                                      \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                                      \"type\": \"string\",\n                                      \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                                      \"description\": \"Detected orientation for the Layout.\"\n                                    },\n                                    \"boundingPoly\": {\n                                      \"properties\": {\n                                        \"normalizedVertices\": {\n                                          \"description\": \"The bounding polygon normalized vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        },\n                                        \"vertices\": {\n                                          \"description\": \"The bounding polygon vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        }\n                                      },\n                                      \"type\": \"object\",\n                                      \"description\": \"A bounding polygon for the detected image annotation.\"\n                                    },\n                                    \"textAnchor\": {\n                                      \"properties\": {\n                                        \"content\": {\n                                          \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                                          \"type\": \"string\"\n                                        },\n                                        \"textSegments\": {\n                                          \"items\": {\n                                          },\n                                          \"type\": \"array\",\n                                          \"description\": \"The text segments from the Document.text.\"\n                                        }\n                                      },\n                                      \"description\": \"Text reference indexing into the Document.text.\",\n                                      \"type\": \"object\"\n                                    }\n                                  },\n                                  \"description\": \"Visual element describing a layout unit on a page.\"\n                                },\n                                \"rowSpan\": {\n                                  \"format\": \"int32\",\n                                  \"description\": \"How many rows this cell spans.\",\n                                  \"type\": \"integer\"\n                                }\n                              },\n                              \"description\": \"A cell representation inside the table.\",\n                              \"type\": \"object\"\n                            },\n                            \"description\": \"Cells that make up this row.\",\n                            \"type\": \"array\"\n                          }\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"headerRows\": {\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"description\": \"A row of table cells.\",\n                        \"properties\": {\n                          \"cells\": {\n                            \"items\": {\n                              \"properties\": {\n                                \"colSpan\": {\n                                  \"type\": \"integer\",\n                                  \"description\": \"How many columns this cell spans.\",\n                                  \"format\": \"int32\"\n                                },\n                                \"detectedLanguages\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"A list of detected languages together with confidence.\",\n                                  \"items\": {\n                                    \"description\": \"Detected language for a structural component.\",\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                      \"confidence\": {\n                                        \"format\": \"float\",\n                                        \"type\": \"number\",\n                                        \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                                      },\n                                      \"languageCode\": {\n                                        \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    }\n                                  }\n                                },\n                                \"layout\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"confidence\": {\n                                      \"format\": \"float\",\n                                      \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                                      \"type\": \"number\"\n                                    },\n                                    \"orientation\": {\n                                      \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                                      \"type\": \"string\",\n                                      \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                                      \"description\": \"Detected orientation for the Layout.\"\n                                    },\n                                    \"boundingPoly\": {\n                                      \"properties\": {\n                                        \"normalizedVertices\": {\n                                          \"description\": \"The bounding polygon normalized vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        },\n                                        \"vertices\": {\n                                          \"description\": \"The bounding polygon vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        }\n                                      },\n                                      \"type\": \"object\",\n                                      \"description\": \"A bounding polygon for the detected image annotation.\"\n                                    },\n                                    \"textAnchor\": {\n                                      \"properties\": {\n                                        \"content\": {\n                                          \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                                          \"type\": \"string\"\n                                        },\n                                        \"textSegments\": {\n                                          \"items\": {\n                                          },\n                                          \"type\": \"array\",\n                                          \"description\": \"The text segments from the Document.text.\"\n                                        }\n                                      },\n                                      \"description\": \"Text reference indexing into the Document.text.\",\n                                      \"type\": \"object\"\n                                    }\n                                  },\n                                  \"description\": \"Visual element describing a layout unit on a page.\"\n                                },\n                                \"rowSpan\": {\n                                  \"format\": \"int32\",\n                                  \"description\": \"How many rows this cell spans.\",\n                                  \"type\": \"integer\"\n                                }\n                              },\n                              \"description\": \"A cell representation inside the table.\",\n                              \"type\": \"object\"\n                            },\n                            \"description\": \"Cells that make up this row.\",\n                            \"type\": \"array\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"Header rows of the table.\"\n                    }\n                  }\n                }\n              },\n              \"blocks\": {\n                \"description\": \"A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"description\": \"A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    }\n                  }\n                }\n              },\n              \"visualElements\": {\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"type\": {\n                      \"description\": \"Type of the VisualElement.\",\n                      \"type\": \"string\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    }\n                  },\n                  \"description\": \"Detected non-text visual elements e.g. checkbox, signature etc. on the page.\"\n                },\n                \"description\": \"A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.\",\n                \"type\": \"array\"\n              },\n              \"imageQualityScores\": {\n                \"description\": \"Image Quality Scores for the page image.\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"qualityScore\": {\n                    \"description\": \"The overall quality score. Range `[0, 1]` where `1` is perfect quality.\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"detectedDefects\": {\n                    \"items\": {\n                      \"description\": \"Image Quality Defects\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"type\": \"number\",\n                          \"description\": \"Confidence of detected defect. Range `[0, 1]` where `1` indicates strong confidence of that the defect exists.\",\n                          \"format\": \"float\"\n                        },\n                        \"type\": {\n                          \"description\": \"Name of the defect type. Supported values are: - `quality/defect_blurry` - `quality/defect_noisy` - `quality/defect_dark` - `quality/defect_faint` - `quality/defect_text_too_small` - `quality/defect_document_cutoff` - `quality/defect_text_cutoff` - `quality/defect_glare`\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\",\n                    \"description\": \"A list of detected defects.\"\n                  }\n                }\n              },\n              \"tokens\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    },\n                    \"detectedBreak\": {\n                      \"properties\": {\n                        \"type\": {\n                          \"enumDescriptions\": [\"Unspecified break type.\", \"A single whitespace.\", \"A wider whitespace.\", \"A hyphen that indicates that a token has been split across lines.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"TYPE_UNSPECIFIED\", \"SPACE\", \"WIDE_SPACE\", \"HYPHEN\"],\n                          \"description\": \"Detected break type.\"\n                        }\n                      },\n                      \"description\": \"Detected break at the end of a Token.\",\n                      \"type\": \"object\"\n                    },\n                    \"styleInfo\": {\n                      \"type\": \"object\",\n                      \"description\": \"Font and other text style attributes.\",\n                      \"properties\": {\n                        \"bold\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is bold (equivalent to font_weight is at least `700`).\"\n                        },\n                        \"strikeout\": {\n                          \"description\": \"Whether the text is strikethrough.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"letterSpacing\": {\n                          \"type\": \"number\",\n                          \"description\": \"Letter spacing in points.\",\n                          \"format\": \"double\"\n                        },\n                        \"textColor\": {\n                          \"properties\": {\n                            \"blue\": {\n                              \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            },\n                            \"green\": {\n                              \"type\": \"number\",\n                              \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\"\n                            },\n                            \"alpha\": {\n                              \"type\": \"number\",\n                              \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                              \"format\": \"float\"\n                            },\n                            \"red\": {\n                              \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            }\n                          },\n                          \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                          \"type\": \"object\"\n                        },\n                        \"backgroundColor\": {\n                          \"properties\": {\n                            \"blue\": {\n                              \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            },\n                            \"green\": {\n                              \"type\": \"number\",\n                              \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\"\n                            },\n                            \"alpha\": {\n                              \"type\": \"number\",\n                              \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                              \"format\": \"float\"\n                            },\n                            \"red\": {\n                              \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            }\n                          },\n                          \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                          \"type\": \"object\"\n                        },\n                        \"fontWeight\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int32\",\n                          \"description\": \"TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy). Normal is `400`, bold is `700`.\"\n                        },\n                        \"italic\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is italic.\"\n                        },\n                        \"pixelFontSize\": {\n                          \"format\": \"double\",\n                          \"type\": \"number\",\n                          \"description\": \"Font size in pixels, equal to _unrounded font_size_ * _resolution_ ÷ `72.0`.\"\n                        },\n                        \"smallcaps\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is in small caps.\"\n                        },\n                        \"superscript\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is a superscript.\"\n                        },\n                        \"underlined\": {\n                          \"description\": \"Whether the text is underlined.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"fontType\": {\n                          \"type\": \"string\",\n                          \"description\": \"Name or style of the font.\"\n                        },\n                        \"subscript\": {\n                          \"description\": \"Whether the text is a subscript.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"handwritten\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is handwritten.\"\n                        },\n                        \"fontSize\": {\n                          \"description\": \"Font size in points (`1` point is `¹⁄₇₂` inches).\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"type\": \"object\",\n                  \"description\": \"A detected token.\"\n                },\n                \"description\": \"A list of visually detected tokens on the page.\"\n              },\n              \"detectedBarcodes\": {\n                \"description\": \"A list of detected barcodes.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"barcode\": {\n                      \"description\": \"Encodes the detailed information of a barcode.\",\n                      \"properties\": {\n                        \"valueFormat\": {\n                          \"type\": \"string\",\n                          \"description\": \"Value format describes the format of the value that a barcode encodes. The supported formats are: - `CONTACT_INFO`: Contact information. - `EMAIL`: Email address. - `ISBN`: ISBN identifier. - `PHONE`: Phone number. - `PRODUCT`: Product. - `SMS`: SMS message. - `TEXT`: Text string. - `URL`: URL address. - `WIFI`: Wifi information. - `GEO`: Geo-localization. - `CALENDAR_EVENT`: Calendar event. - `DRIVER_LICENSE`: Driver\\u0027s license.\"\n                        },\n                        \"rawValue\": {\n                          \"type\": \"string\",\n                          \"description\": \"Raw value encoded in the barcode. For example: `\\u0027MEBKM:TITLE:Google;URL:https://www.google.com;;\\u0027`.\"\n                        },\n                        \"format\": {\n                          \"description\": \"Format of a barcode. The supported formats are: - `CODE_128`: Code 128 type. - `CODE_39`: Code 39 type. - `CODE_93`: Code 93 type. - `CODABAR`: Codabar type. - `DATA_MATRIX`: 2D Data Matrix type. - `ITF`: ITF type. - `EAN_13`: EAN-13 type. - `EAN_8`: EAN-8 type. - `QR_CODE`: 2D QR code type. - `UPC_A`: UPC-A type. - `UPC_E`: UPC-E type. - `PDF417`: PDF417 type. - `AZTEC`: 2D Aztec code type. - `DATABAR`: GS1 DataBar code type.\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A detected barcode.\",\n                  \"type\": \"object\"\n                }\n              },\n              \"paragraphs\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A collection of lines that a human would perceive as a paragraph.\"\n                }\n              },\n              \"provenance\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"revision\": {\n                    \"description\": \"The index of the revision that produced this element.\",\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                  },\n                  \"id\": {\n                    \"format\": \"int32\",\n                    \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                    \"type\": \"integer\"\n                  },\n                  \"parents\": {\n                    \"description\": \"References to the original elements that are replaced.\",\n                    \"items\": {\n                      \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"description\": \"The id of the parent provenance.\",\n                          \"format\": \"int32\"\n                        },\n                        \"revision\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                          \"type\": \"integer\"\n                        },\n                        \"index\": {\n                          \"format\": \"int32\",\n                          \"type\": \"integer\",\n                          \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"type\": {\n                    \"description\": \"The type of provenance operation.\",\n                    \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                    \"type\": \"string\",\n                    \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                  }\n                },\n                \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n              },\n              \"detectedLanguages\": {\n                \"items\": {\n                  \"description\": \"Detected language for a structural component.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"confidence\": {\n                      \"format\": \"float\",\n                      \"type\": \"number\",\n                      \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                    },\n                    \"languageCode\": {\n                      \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"type\": \"array\",\n                \"description\": \"A list of detected languages together with confidence.\"\n              },\n              \"image\": {\n                \"properties\": {\n                  \"width\": {\n                    \"format\": \"int32\",\n                    \"description\": \"Width of the image in pixels.\",\n                    \"type\": \"integer\"\n                  },\n                  \"height\": {\n                    \"format\": \"int32\",\n                    \"description\": \"Height of the image in pixels.\",\n                    \"type\": \"integer\"\n                  },\n                  \"mimeType\": {\n                    \"type\": \"string\",\n                    \"description\": \"Encoding [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml) for the image.\"\n                  },\n                  \"content\": {\n                    \"type\": \"string\",\n                    \"description\": \"Raw byte content of the image.\",\n                    \"format\": \"byte\"\n                  }\n                },\n                \"type\": \"object\",\n                \"description\": \"Rendered image contents for this page.\"\n              },\n              \"dimension\": {\n                \"properties\": {\n                  \"height\": {\n                    \"description\": \"Page height.\",\n                    \"type\": \"number\",\n                    \"format\": \"float\"\n                  },\n                  \"unit\": {\n                    \"description\": \"Dimension unit.\",\n                    \"type\": \"string\"\n                  },\n                  \"width\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\",\n                    \"description\": \"Page width.\"\n                  }\n                },\n                \"description\": \"Dimension for the page.\",\n                \"type\": \"object\"\n              },\n              \"lines\": {\n                \"description\": \"A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                              },\n                              \"index\": {\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A collection of tokens that a human would perceive as a line. Does not cross column boundaries, can be horizontal, vertical, etc.\",\n                  \"type\": \"object\"\n                }\n              },\n              \"layout\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"confidence\": {\n                    \"format\": \"float\",\n                    \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                    \"type\": \"number\"\n                  },\n                  \"orientation\": {\n                    \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                    \"type\": \"string\",\n                    \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                    \"description\": \"Detected orientation for the Layout.\"\n                  },\n                  \"boundingPoly\": {\n                    \"properties\": {\n                      \"normalizedVertices\": {\n                        \"description\": \"The bounding polygon normalized vertices.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                        }\n                      },\n                      \"vertices\": {\n                        \"description\": \"The bounding polygon vertices.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                        }\n                      }\n                    },\n                    \"type\": \"object\",\n                    \"description\": \"A bounding polygon for the detected image annotation.\"\n                  },\n                  \"textAnchor\": {\n                    \"properties\": {\n                      \"content\": {\n                        \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                        \"type\": \"string\"\n                      },\n                      \"textSegments\": {\n                        \"items\": {\n                        },\n                        \"type\": \"array\",\n                        \"description\": \"The text segments from the Document.text.\"\n                      }\n                    },\n                    \"description\": \"Text reference indexing into the Document.text.\",\n                    \"type\": \"object\"\n                  }\n                },\n                \"description\": \"Visual element describing a layout unit on a page.\"\n              },\n              \"pageNumber\": {\n                \"description\": \"1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.\",\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          },\n          \"description\": \"Visual page layout for the Document.\"\n        },\n        \"content\": {\n          \"type\": \"string\",\n          \"format\": \"byte\",\n          \"description\": \"Optional. Inline document content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64.\"\n        },\n        \"shardInfo\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"textOffset\": {\n              \"type\": \"string\",\n              \"description\": \"The index of the first character in Document.text in the overall document global text.\",\n              \"format\": \"int64\"\n            },\n            \"shardIndex\": {\n              \"description\": \"The 0-based index of this shard.\",\n              \"type\": \"string\",\n              \"format\": \"int64\"\n            },\n            \"shardCount\": {\n              \"description\": \"Total number of shards.\",\n              \"type\": \"string\",\n              \"format\": \"int64\"\n            }\n          },\n          \"description\": \"For a large document, sharding may be performed to produce several document shards. Each document shard contains this field to detail which shard it is.\"\n        },\n        \"textStyles\": {\n          \"type\": \"array\",\n          \"description\": \"Styles for the Document.text.\",\n          \"items\": {\n            \"description\": \"Annotation for common text style attributes. This adheres to CSS conventions as much as possible.\",\n            \"properties\": {\n              \"fontFamily\": {\n                \"description\": \"Font family such as `Arial`, `Times New Roman`. https://www.w3schools.com/cssref/pr_font_font-family.asp\",\n                \"type\": \"string\"\n              },\n              \"fontWeight\": {\n                \"type\": \"string\",\n                \"description\": \"[Font weight](https://www.w3schools.com/cssref/pr_font_weight.asp). Possible values are `normal`, `bold`, `bolder`, and `lighter`.\"\n              },\n              \"color\": {\n                \"properties\": {\n                  \"blue\": {\n                    \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"green\": {\n                    \"type\": \"number\",\n                    \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\"\n                  },\n                  \"alpha\": {\n                    \"type\": \"number\",\n                    \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                    \"format\": \"float\"\n                  },\n                  \"red\": {\n                    \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  }\n                },\n                \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                \"type\": \"object\"\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"textDecoration\": {\n                \"type\": \"string\",\n                \"description\": \"[Text decoration](https://www.w3schools.com/cssref/pr_text_text-decoration.asp). Follows CSS standard. \"\n              },\n              \"fontSize\": {\n                \"properties\": {\n                  \"size\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\",\n                    \"description\": \"Font size for the text.\"\n                  },\n                  \"unit\": {\n                    \"description\": \"Unit for the font size. Follows CSS naming (`in`, `px`, `pt`, etc.).\",\n                    \"type\": \"string\"\n                  }\n                },\n                \"description\": \"Font size with unit.\",\n                \"type\": \"object\"\n              },\n              \"backgroundColor\": {\n                \"properties\": {\n                  \"blue\": {\n                    \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"green\": {\n                    \"type\": \"number\",\n                    \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\"\n                  },\n                  \"alpha\": {\n                    \"type\": \"number\",\n                    \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                    \"format\": \"float\"\n                  },\n                  \"red\": {\n                    \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  }\n                },\n                \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                \"type\": \"object\"\n              },\n              \"textStyle\": {\n                \"type\": \"string\",\n                \"description\": \"[Text style](https://www.w3schools.com/cssref/pr_font_font-style.asp). Possible values are `normal`, `italic`, and `oblique`.\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"entities\": {\n          \"description\": \"A list of entities detected on Document.text. For document shards, entities in this list may cross shard boundaries.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n            \"properties\": {\n              \"provenance\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"revision\": {\n                  },\n                  \"id\": {\n                    \"format\": \"int32\",\n                    \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                    \"type\": \"integer\"\n                  },\n                  \"parents\": {\n                  },\n                  \"type\": {\n                  }\n                },\n                \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n              },\n              \"pageAnchor\": {\n                \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"pageRefs\": {\n                  }\n                }\n              },\n              \"mentionId\": {\n                \"type\": \"string\",\n                \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n              },\n              \"normalizedValue\": {\n                \"properties\": {\n                  \"datetimeValue\": {\n                  },\n                  \"integerValue\": {\n                  },\n                  \"addressValue\": {\n                  },\n                  \"dateValue\": {\n                  },\n                  \"floatValue\": {\n                  },\n                  \"booleanValue\": {\n                  },\n                  \"moneyValue\": {\n                  },\n                  \"text\": {\n                  }\n                },\n                \"type\": \"object\",\n                \"description\": \"Parsed and normalized entity value.\"\n              },\n              \"confidence\": {\n                \"type\": \"number\",\n                \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                \"format\": \"float\"\n              },\n              \"properties\": {\n                \"type\": \"array\",\n                \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                \"items\": {\n                  \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                        },\n                        \"type\": {\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"pageAnchor\": {\n                      \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"pageRefs\": {\n                        }\n                      }\n                    },\n                    \"mentionId\": {\n                      \"type\": \"string\",\n                      \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                    },\n                    \"normalizedValue\": {\n                      \"properties\": {\n                        \"datetimeValue\": {\n                        },\n                        \"integerValue\": {\n                        },\n                        \"addressValue\": {\n                        },\n                        \"dateValue\": {\n                        },\n                        \"floatValue\": {\n                        },\n                        \"booleanValue\": {\n                        },\n                        \"moneyValue\": {\n                        },\n                        \"text\": {\n                        }\n                      },\n                      \"type\": \"object\",\n                      \"description\": \"Parsed and normalized entity value.\"\n                    },\n                    \"confidence\": {\n                      \"type\": \"number\",\n                      \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                      \"format\": \"float\"\n                    },\n                    \"properties\": {\n                      \"type\": \"array\",\n                      \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                      \"items\": {\n                        \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                        \"properties\": {\n                          \"provenance\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"revision\": {\n                              },\n                              \"id\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                \"type\": \"integer\"\n                              },\n                              \"parents\": {\n                              },\n                              \"type\": {\n                              }\n                            },\n                            \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                          },\n                          \"pageAnchor\": {\n                            \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"pageRefs\": {\n                              }\n                            }\n                          },\n                          \"mentionId\": {\n                            \"type\": \"string\",\n                            \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                          },\n                          \"normalizedValue\": {\n                            \"properties\": {\n                              \"datetimeValue\": {\n                              },\n                              \"integerValue\": {\n                              },\n                              \"addressValue\": {\n                              },\n                              \"dateValue\": {\n                              },\n                              \"floatValue\": {\n                              },\n                              \"booleanValue\": {\n                              },\n                              \"moneyValue\": {\n                              },\n                              \"text\": {\n                              }\n                            },\n                            \"type\": \"object\",\n                            \"description\": \"Parsed and normalized entity value.\"\n                          },\n                          \"confidence\": {\n                            \"type\": \"number\",\n                            \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                            \"format\": \"float\"\n                          },\n                          \"properties\": {\n                            \"type\": \"array\",\n                            \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                            \"items\": {\n                              \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                              \"properties\": {\n                                \"provenance\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"revision\": {\n                                    },\n                                    \"id\": {\n                                      \"format\": \"int32\",\n                                      \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                      \"type\": \"integer\"\n                                    },\n                                    \"parents\": {\n                                    },\n                                    \"type\": {\n                                    }\n                                  },\n                                  \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                                },\n                                \"pageAnchor\": {\n                                  \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"pageRefs\": {\n                                    }\n                                  }\n                                },\n                                \"mentionId\": {\n                                  \"type\": \"string\",\n                                  \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                                },\n                                \"normalizedValue\": {\n                                  \"properties\": {\n                                    \"datetimeValue\": {\n                                    },\n                                    \"integerValue\": {\n                                    },\n                                    \"addressValue\": {\n                                    },\n                                    \"dateValue\": {\n                                    },\n                                    \"floatValue\": {\n                                    },\n                                    \"booleanValue\": {\n                                    },\n                                    \"moneyValue\": {\n                                    },\n                                    \"text\": {\n                                    }\n                                  },\n                                  \"type\": \"object\",\n                                  \"description\": \"Parsed and normalized entity value.\"\n                                },\n                                \"confidence\": {\n                                  \"type\": \"number\",\n                                  \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                                  \"format\": \"float\"\n                                },\n                                \"properties\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                                  \"items\": {\n                                    \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                                    \"properties\": {\n                                      \"provenance\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                          \"revision\": {\n                                          },\n                                          \"id\": {\n                                            \"format\": \"int32\",\n                                            \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                            \"type\": \"integer\"\n                                          },\n                                          \"parents\": {\n                                          },\n                                          \"type\": {\n                                          }\n                                        },\n                                        \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                                      },\n                                      \"pageAnchor\": {\n                                        \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                          \"pageRefs\": {\n                                          }\n                                        }\n                                      },\n                                      \"mentionId\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                                      },\n                                      \"normalizedValue\": {\n                                        \"properties\": {\n                                          \"datetimeValue\": {\n                                          },\n                                          \"integerValue\": {\n                                          },\n                                          \"addressValue\": {\n                                          },\n                                          \"dateValue\": {\n                                          },\n                                          \"floatValue\": {\n                                          },\n                                          \"booleanValue\": {\n                                          },\n                                          \"moneyValue\": {\n                                          },\n                                          \"text\": {\n                                          }\n                                        },\n                                        \"type\": \"object\",\n                                        \"description\": \"Parsed and normalized entity value.\"\n                                      },\n                                      \"confidence\": {\n                                        \"type\": \"number\",\n                                        \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                                        \"format\": \"float\"\n                                      },\n                                      \"properties\": {\n                                        \"type\": \"array\",\n                                        \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                                        \"items\": {\n                                          \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                                          \"properties\": {\n                                          },\n                                          \"type\": \"object\"\n                                        }\n                                      },\n                                      \"mentionText\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                                      },\n                                      \"id\": {\n                                        \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                                        \"type\": \"string\"\n                                      },\n                                      \"redacted\": {\n                                        \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                                        \"type\": \"boolean\"\n                                      },\n                                      \"textAnchor\": {\n                                        \"properties\": {\n                                          \"content\": {\n                                          },\n                                          \"textSegments\": {\n                                          }\n                                        },\n                                        \"description\": \"Text reference indexing into the Document.text.\",\n                                        \"type\": \"object\"\n                                      },\n                                      \"type\": {\n                                        \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    },\n                                    \"type\": \"object\"\n                                  }\n                                },\n                                \"mentionText\": {\n                                  \"type\": \"string\",\n                                  \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                                },\n                                \"id\": {\n                                  \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                                  \"type\": \"string\"\n                                },\n                                \"redacted\": {\n                                  \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                                  \"type\": \"boolean\"\n                                },\n                                \"textAnchor\": {\n                                  \"properties\": {\n                                    \"content\": {\n                                    },\n                                    \"textSegments\": {\n                                    }\n                                  },\n                                  \"description\": \"Text reference indexing into the Document.text.\",\n                                  \"type\": \"object\"\n                                },\n                                \"type\": {\n                                  \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                                  \"type\": \"string\"\n                                }\n                              },\n                              \"type\": \"object\"\n                            }\n                          },\n                          \"mentionText\": {\n                            \"type\": \"string\",\n                            \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                          },\n                          \"id\": {\n                            \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                            \"type\": \"string\"\n                          },\n                          \"redacted\": {\n                            \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                            \"type\": \"boolean\"\n                          },\n                          \"textAnchor\": {\n                            \"properties\": {\n                              \"content\": {\n                              },\n                              \"textSegments\": {\n                              }\n                            },\n                            \"description\": \"Text reference indexing into the Document.text.\",\n                            \"type\": \"object\"\n                          },\n                          \"type\": {\n                            \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"type\": \"object\"\n                      }\n                    },\n                    \"mentionText\": {\n                      \"type\": \"string\",\n                      \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                    },\n                    \"id\": {\n                      \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                      \"type\": \"string\"\n                    },\n                    \"redacted\": {\n                      \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                      \"type\": \"boolean\"\n                    },\n                    \"textAnchor\": {\n                      \"properties\": {\n                        \"content\": {\n                        },\n                        \"textSegments\": {\n                        }\n                      },\n                      \"description\": \"Text reference indexing into the Document.text.\",\n                      \"type\": \"object\"\n                    },\n                    \"type\": {\n                      \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              },\n              \"mentionText\": {\n                \"type\": \"string\",\n                \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n              },\n              \"id\": {\n                \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                \"type\": \"string\"\n              },\n              \"redacted\": {\n                \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                \"type\": \"boolean\"\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"type\": {\n                \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                \"type\": \"string\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"textChanges\": {\n          \"type\": \"array\",\n          \"description\": \"Placeholder. A list of text corrections made to Document.text. This is usually used for annotating corrections to OCR mistakes. Text changes for a given revision may not overlap with each other.\",\n          \"items\": {\n            \"description\": \"This message is used for text changes aka. OCR corrections.\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"provenance\": {\n                \"description\": \"The history of this annotation.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"revision\": {\n                      \"description\": \"The index of the revision that produced this element.\",\n                      \"type\": \"integer\",\n                      \"format\": \"int32\"\n                    },\n                    \"id\": {\n                      \"format\": \"int32\",\n                      \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                      \"type\": \"integer\"\n                    },\n                    \"parents\": {\n                      \"description\": \"References to the original elements that are replaced.\",\n                      \"items\": {\n                        \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"integer\",\n                            \"description\": \"The id of the parent provenance.\",\n                            \"format\": \"int32\"\n                          },\n                          \"revision\": {\n                          },\n                          \"index\": {\n                          }\n                        },\n                        \"type\": \"object\"\n                      },\n                      \"type\": \"array\"\n                    },\n                    \"type\": {\n                      \"description\": \"The type of provenance operation.\",\n                      \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                      \"type\": \"string\",\n                      \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                    }\n                  },\n                  \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                }\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"changedText\": {\n                \"type\": \"string\",\n                \"description\": \"The text that replaces the text identified in the `text_anchor`.\"\n              }\n            }\n          }\n        },\n        \"uri\": {\n          \"type\": \"string\",\n          \"description\": \"Optional. Currently supports Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. For more information, refer to [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris).\"\n        },\n        \"text\": {\n          \"type\": \"string\",\n          \"description\": \"Optional. UTF-8 encoded text in reading order from the document.\"\n        },\n        \"entityRelations\": {\n          \"description\": \"Placeholder. Relationship among Document.entities.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"Relationship between Entities.\",\n            \"properties\": {\n              \"subjectId\": {\n                \"description\": \"Subject entity id.\",\n                \"type\": \"string\"\n              },\n              \"relation\": {\n                \"description\": \"Relationship description.\",\n                \"type\": \"string\"\n              },\n              \"objectId\": {\n                \"type\": \"string\",\n                \"description\": \"Object entity id.\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"mimeType\": {\n          \"description\": \"An IANA published [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml).\",\n          \"type\": \"string\"\n        },\n        \"error\": {\n          \"properties\": {\n            \"message\": {\n              \"description\": \"A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.\",\n              \"type\": \"string\"\n            },\n            \"details\": {\n              \"items\": {\n                \"additionalProperties\": {\n                  \"type\": \"any\",\n                  \"description\": \"Properties of the object. Contains field @type with type URL.\"\n                },\n                \"type\": \"object\"\n              },\n              \"description\": \"A list of messages that carry the error details. There is a common set of message types for APIs to use.\",\n              \"type\": \"array\"\n            },\n            \"code\": {\n              \"type\": \"integer\",\n              \"description\": \"The status code, which should be an enum value of google.rpc.Code.\",\n              \"format\": \"int32\"\n            }\n          },\n          \"type\": \"object\",\n          \"description\": \"The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).\"\n        }\n      },\n      \"type\": \"object\",\n      \"description\": \"Document represents the canonical document resource in Document AI. It is an interchange format that provides insights into documents and allows for collaboration between users and Document AI to iterate and optimize for quality.\"\n    }\n  }\n}"
  }, {
    "key": "GCS_Object_Event_Type",
    "dataType": "STRING_VALUE",
    "displayName": "GCS_Object_Event_Type"
  }, {
    "key": "doc-ocr-text-data",
    "dataType": "STRING_VALUE",
    "displayName": "doc-ocr-text-data"
  }, {
    "key": "`Task_24_connectorInputPayload`",
    "dataType": "JSON_VALUE",
    "displayName": "`Task_24_connectorInputPayload`",
    "producer": "1_24",
    "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"file_name\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"gcs_uri\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"file_text\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"pos_type\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"created_date\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"id\": {\n      \"type\": \"integer\"\n    }\n  }\n}"
  }, {
    "key": "`Task_24_connectorOutputPayload`",
    "dataType": "JSON_VALUE",
    "displayName": "`Task_24_connectorOutputPayload`",
    "isTransient": true,
    "producer": "1_24"
  }, {
    "key": "`Task_26_request`",
    "dataType": "JSON_VALUE",
    "defaultValue": {
      "jsonValue": "{\n}"
    },
    "displayName": "`Task_26_request`",
    "isTransient": true,
    "producer": "1_26",
    "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"rawDocument\": {\n      \"description\": \"Payload message of raw document content (bytes).\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"mimeType\": {\n          \"type\": \"string\",\n          \"description\": \"An IANA MIME type (RFC6838) indicating the nature and format of the content.\"\n        },\n        \"content\": {\n          \"type\": \"string\",\n          \"description\": \"Inline document content.\",\n          \"format\": \"byte\"\n        }\n      }\n    },\n    \"skipHumanReview\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether Human Review feature should be skipped for this request. Default to false.\"\n    },\n    \"inlineDocument\": {\n      \"properties\": {\n        \"revisions\": {\n          \"description\": \"Placeholder. Revision history of this document.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"description\": \"Contains past or forward revisions of this document.\",\n            \"properties\": {\n              \"agent\": {\n                \"type\": \"string\",\n                \"description\": \"If the change was made by a person specify the name or id of that person.\"\n              },\n              \"createTime\": {\n                \"format\": \"google-datetime\",\n                \"description\": \"The time that the revision was created, internally generated by doc proto storage at the time of create.\",\n                \"type\": \"string\"\n              },\n              \"humanReview\": {\n                \"description\": \"Human Review information of the document.\",\n                \"properties\": {\n                  \"stateMessage\": {\n                    \"description\": \"A message providing more details about the current state of processing. For example, the rejection reason when the state is `rejected`.\",\n                    \"type\": \"string\"\n                  },\n                  \"state\": {\n                    \"description\": \"Human review state. e.g. `requested`, `succeeded`, `rejected`.\",\n                    \"type\": \"string\"\n                  }\n                },\n                \"type\": \"object\"\n              },\n              \"parentIds\": {\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"array\",\n                \"description\": \"The revisions that this revision is based on. Must include all the ids that have anything to do with this revision - eg. there are `provenance.parent.revision` fields that index into this field.\"\n              },\n              \"parent\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"format\": \"int32\",\n                  \"type\": \"integer\"\n                },\n                \"description\": \"The revisions that this revision is based on. This can include one or more parent (when documents are merged.) This field represents the index into the `revisions` field.\"\n              },\n              \"id\": {\n                \"description\": \"Id of the revision, internally generated by doc proto storage. Unique within the context of the document.\",\n                \"type\": \"string\"\n              },\n              \"processor\": {\n                \"type\": \"string\",\n                \"description\": \"If the annotation was made by processor identify the processor by its resource name.\"\n              }\n            }\n          }\n        },\n        \"pages\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"A page in a Document.\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"transforms\": {\n                \"type\": \"array\",\n                \"description\": \"Transformation matrices that were applied to the original document image to produce Page.image.\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"description\": \"Representation for transformation matrix, intended to be compatible and used with OpenCV format for image manipulation.\",\n                  \"properties\": {\n                    \"cols\": {\n                      \"format\": \"int32\",\n                      \"type\": \"integer\",\n                      \"description\": \"Number of columns in the matrix.\"\n                    },\n                    \"type\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\",\n                      \"description\": \"This encodes information about what data type the matrix uses. For example, 0 (CV_8U) is an unsigned 8-bit image. For the full list of OpenCV primitive data types, please refer to https://docs.opencv.org/4.3.0/d1/d1b/group__core__hal__interface.html\"\n                    },\n                    \"rows\": {\n                      \"description\": \"Number of rows in the matrix.\",\n                      \"format\": \"int32\",\n                      \"type\": \"integer\"\n                    },\n                    \"data\": {\n                      \"description\": \"The matrix data.\",\n                      \"type\": \"string\",\n                      \"format\": \"byte\"\n                    }\n                  }\n                }\n              },\n              \"formFields\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected form fields on the page.\",\n                \"items\": {\n                  \"description\": \"A form field detected on the page.\",\n                  \"properties\": {\n                    \"fieldValue\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"fieldName\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"correctedKeyText\": {\n                      \"description\": \"Created for Labeling UI to export key text. If corrections were made to the text identified by the `field_name.text_anchor`, this field will contain the correction.\",\n                      \"type\": \"string\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"correctedValueText\": {\n                      \"description\": \"Created for Labeling UI to export value text. If corrections were made to the text identified by the `field_value.text_anchor`, this field will contain the correction.\",\n                      \"type\": \"string\"\n                    },\n                    \"valueDetectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages for value together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"valueType\": {\n                      \"type\": \"string\",\n                      \"description\": \"If the value is non-textual, this field represents the type. Current valid values are: - blank (this indicates the `field_value` is normal text) - `unfilled_checkbox` - `filled_checkbox`\"\n                    },\n                    \"nameDetectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages for name together with confidence.\",\n                      \"type\": \"array\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              },\n              \"symbols\": {\n                \"description\": \"A list of visually detected symbols on the page.\",\n                \"items\": {\n                  \"properties\": {\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"type\": \"array\"\n                    }\n                  },\n                  \"description\": \"A detected symbol.\",\n                  \"type\": \"object\"\n                },\n                \"type\": \"array\"\n              },\n              \"tables\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected tables on the page.\",\n                \"items\": {\n                  \"description\": \"A table representation similar to HTML table structure.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"type\": \"array\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"bodyRows\": {\n                      \"description\": \"Body rows of the table.\",\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"description\": \"A row of table cells.\",\n                        \"properties\": {\n                          \"cells\": {\n                            \"items\": {\n                              \"properties\": {\n                                \"colSpan\": {\n                                  \"type\": \"integer\",\n                                  \"description\": \"How many columns this cell spans.\",\n                                  \"format\": \"int32\"\n                                },\n                                \"detectedLanguages\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"A list of detected languages together with confidence.\",\n                                  \"items\": {\n                                    \"description\": \"Detected language for a structural component.\",\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                      \"confidence\": {\n                                        \"format\": \"float\",\n                                        \"type\": \"number\",\n                                        \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                                      },\n                                      \"languageCode\": {\n                                        \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    }\n                                  }\n                                },\n                                \"layout\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"confidence\": {\n                                      \"format\": \"float\",\n                                      \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                                      \"type\": \"number\"\n                                    },\n                                    \"orientation\": {\n                                      \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                                      \"type\": \"string\",\n                                      \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                                      \"description\": \"Detected orientation for the Layout.\"\n                                    },\n                                    \"boundingPoly\": {\n                                      \"properties\": {\n                                        \"normalizedVertices\": {\n                                          \"description\": \"The bounding polygon normalized vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        },\n                                        \"vertices\": {\n                                          \"description\": \"The bounding polygon vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        }\n                                      },\n                                      \"type\": \"object\",\n                                      \"description\": \"A bounding polygon for the detected image annotation.\"\n                                    },\n                                    \"textAnchor\": {\n                                      \"properties\": {\n                                        \"content\": {\n                                          \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                                          \"type\": \"string\"\n                                        },\n                                        \"textSegments\": {\n                                          \"items\": {\n                                          },\n                                          \"type\": \"array\",\n                                          \"description\": \"The text segments from the Document.text.\"\n                                        }\n                                      },\n                                      \"description\": \"Text reference indexing into the Document.text.\",\n                                      \"type\": \"object\"\n                                    }\n                                  },\n                                  \"description\": \"Visual element describing a layout unit on a page.\"\n                                },\n                                \"rowSpan\": {\n                                  \"format\": \"int32\",\n                                  \"description\": \"How many rows this cell spans.\",\n                                  \"type\": \"integer\"\n                                }\n                              },\n                              \"description\": \"A cell representation inside the table.\",\n                              \"type\": \"object\"\n                            },\n                            \"description\": \"Cells that make up this row.\",\n                            \"type\": \"array\"\n                          }\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"headerRows\": {\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"description\": \"A row of table cells.\",\n                        \"properties\": {\n                          \"cells\": {\n                            \"items\": {\n                              \"properties\": {\n                                \"colSpan\": {\n                                  \"type\": \"integer\",\n                                  \"description\": \"How many columns this cell spans.\",\n                                  \"format\": \"int32\"\n                                },\n                                \"detectedLanguages\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"A list of detected languages together with confidence.\",\n                                  \"items\": {\n                                    \"description\": \"Detected language for a structural component.\",\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                      \"confidence\": {\n                                        \"format\": \"float\",\n                                        \"type\": \"number\",\n                                        \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                                      },\n                                      \"languageCode\": {\n                                        \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    }\n                                  }\n                                },\n                                \"layout\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"confidence\": {\n                                      \"format\": \"float\",\n                                      \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                                      \"type\": \"number\"\n                                    },\n                                    \"orientation\": {\n                                      \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                                      \"type\": \"string\",\n                                      \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                                      \"description\": \"Detected orientation for the Layout.\"\n                                    },\n                                    \"boundingPoly\": {\n                                      \"properties\": {\n                                        \"normalizedVertices\": {\n                                          \"description\": \"The bounding polygon normalized vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        },\n                                        \"vertices\": {\n                                          \"description\": \"The bounding polygon vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        }\n                                      },\n                                      \"type\": \"object\",\n                                      \"description\": \"A bounding polygon for the detected image annotation.\"\n                                    },\n                                    \"textAnchor\": {\n                                      \"properties\": {\n                                        \"content\": {\n                                          \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                                          \"type\": \"string\"\n                                        },\n                                        \"textSegments\": {\n                                          \"items\": {\n                                          },\n                                          \"type\": \"array\",\n                                          \"description\": \"The text segments from the Document.text.\"\n                                        }\n                                      },\n                                      \"description\": \"Text reference indexing into the Document.text.\",\n                                      \"type\": \"object\"\n                                    }\n                                  },\n                                  \"description\": \"Visual element describing a layout unit on a page.\"\n                                },\n                                \"rowSpan\": {\n                                  \"format\": \"int32\",\n                                  \"description\": \"How many rows this cell spans.\",\n                                  \"type\": \"integer\"\n                                }\n                              },\n                              \"description\": \"A cell representation inside the table.\",\n                              \"type\": \"object\"\n                            },\n                            \"description\": \"Cells that make up this row.\",\n                            \"type\": \"array\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"Header rows of the table.\"\n                    }\n                  }\n                }\n              },\n              \"blocks\": {\n                \"description\": \"A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"description\": \"A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    }\n                  }\n                }\n              },\n              \"visualElements\": {\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"type\": {\n                      \"description\": \"Type of the VisualElement.\",\n                      \"type\": \"string\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    }\n                  },\n                  \"description\": \"Detected non-text visual elements e.g. checkbox, signature etc. on the page.\"\n                },\n                \"description\": \"A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.\",\n                \"type\": \"array\"\n              },\n              \"imageQualityScores\": {\n                \"description\": \"Image Quality Scores for the page image.\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"qualityScore\": {\n                    \"description\": \"The overall quality score. Range `[0, 1]` where `1` is perfect quality.\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"detectedDefects\": {\n                    \"items\": {\n                      \"description\": \"Image Quality Defects\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"type\": \"number\",\n                          \"description\": \"Confidence of detected defect. Range `[0, 1]` where `1` indicates strong confidence of that the defect exists.\",\n                          \"format\": \"float\"\n                        },\n                        \"type\": {\n                          \"description\": \"Name of the defect type. Supported values are: - `quality/defect_blurry` - `quality/defect_noisy` - `quality/defect_dark` - `quality/defect_faint` - `quality/defect_text_too_small` - `quality/defect_document_cutoff` - `quality/defect_text_cutoff` - `quality/defect_glare`\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\",\n                    \"description\": \"A list of detected defects.\"\n                  }\n                }\n              },\n              \"tokens\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    },\n                    \"detectedBreak\": {\n                      \"properties\": {\n                        \"type\": {\n                          \"enumDescriptions\": [\"Unspecified break type.\", \"A single whitespace.\", \"A wider whitespace.\", \"A hyphen that indicates that a token has been split across lines.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"TYPE_UNSPECIFIED\", \"SPACE\", \"WIDE_SPACE\", \"HYPHEN\"],\n                          \"description\": \"Detected break type.\"\n                        }\n                      },\n                      \"description\": \"Detected break at the end of a Token.\",\n                      \"type\": \"object\"\n                    },\n                    \"styleInfo\": {\n                      \"type\": \"object\",\n                      \"description\": \"Font and other text style attributes.\",\n                      \"properties\": {\n                        \"bold\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is bold (equivalent to font_weight is at least `700`).\"\n                        },\n                        \"strikeout\": {\n                          \"description\": \"Whether the text is strikethrough.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"letterSpacing\": {\n                          \"type\": \"number\",\n                          \"description\": \"Letter spacing in points.\",\n                          \"format\": \"double\"\n                        },\n                        \"textColor\": {\n                          \"properties\": {\n                            \"blue\": {\n                              \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            },\n                            \"green\": {\n                              \"type\": \"number\",\n                              \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\"\n                            },\n                            \"alpha\": {\n                              \"type\": \"number\",\n                              \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                              \"format\": \"float\"\n                            },\n                            \"red\": {\n                              \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            }\n                          },\n                          \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                          \"type\": \"object\"\n                        },\n                        \"backgroundColor\": {\n                          \"properties\": {\n                            \"blue\": {\n                              \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            },\n                            \"green\": {\n                              \"type\": \"number\",\n                              \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\"\n                            },\n                            \"alpha\": {\n                              \"type\": \"number\",\n                              \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                              \"format\": \"float\"\n                            },\n                            \"red\": {\n                              \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            }\n                          },\n                          \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                          \"type\": \"object\"\n                        },\n                        \"fontWeight\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int32\",\n                          \"description\": \"TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy). Normal is `400`, bold is `700`.\"\n                        },\n                        \"italic\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is italic.\"\n                        },\n                        \"pixelFontSize\": {\n                          \"format\": \"double\",\n                          \"type\": \"number\",\n                          \"description\": \"Font size in pixels, equal to _unrounded font_size_ * _resolution_ ÷ `72.0`.\"\n                        },\n                        \"smallcaps\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is in small caps.\"\n                        },\n                        \"superscript\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is a superscript.\"\n                        },\n                        \"underlined\": {\n                          \"description\": \"Whether the text is underlined.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"fontType\": {\n                          \"type\": \"string\",\n                          \"description\": \"Name or style of the font.\"\n                        },\n                        \"subscript\": {\n                          \"description\": \"Whether the text is a subscript.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"handwritten\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is handwritten.\"\n                        },\n                        \"fontSize\": {\n                          \"description\": \"Font size in points (`1` point is `¹⁄₇₂` inches).\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"type\": \"object\",\n                  \"description\": \"A detected token.\"\n                },\n                \"description\": \"A list of visually detected tokens on the page.\"\n              },\n              \"detectedBarcodes\": {\n                \"description\": \"A list of detected barcodes.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"barcode\": {\n                      \"description\": \"Encodes the detailed information of a barcode.\",\n                      \"properties\": {\n                        \"valueFormat\": {\n                          \"type\": \"string\",\n                          \"description\": \"Value format describes the format of the value that a barcode encodes. The supported formats are: - `CONTACT_INFO`: Contact information. - `EMAIL`: Email address. - `ISBN`: ISBN identifier. - `PHONE`: Phone number. - `PRODUCT`: Product. - `SMS`: SMS message. - `TEXT`: Text string. - `URL`: URL address. - `WIFI`: Wifi information. - `GEO`: Geo-localization. - `CALENDAR_EVENT`: Calendar event. - `DRIVER_LICENSE`: Driver\\u0027s license.\"\n                        },\n                        \"rawValue\": {\n                          \"type\": \"string\",\n                          \"description\": \"Raw value encoded in the barcode. For example: `\\u0027MEBKM:TITLE:Google;URL:https://www.google.com;;\\u0027`.\"\n                        },\n                        \"format\": {\n                          \"description\": \"Format of a barcode. The supported formats are: - `CODE_128`: Code 128 type. - `CODE_39`: Code 39 type. - `CODE_93`: Code 93 type. - `CODABAR`: Codabar type. - `DATA_MATRIX`: 2D Data Matrix type. - `ITF`: ITF type. - `EAN_13`: EAN-13 type. - `EAN_8`: EAN-8 type. - `QR_CODE`: 2D QR code type. - `UPC_A`: UPC-A type. - `UPC_E`: UPC-E type. - `PDF417`: PDF417 type. - `AZTEC`: 2D Aztec code type. - `DATABAR`: GS1 DataBar code type.\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A detected barcode.\",\n                  \"type\": \"object\"\n                }\n              },\n              \"paragraphs\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A collection of lines that a human would perceive as a paragraph.\"\n                }\n              },\n              \"provenance\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"revision\": {\n                    \"description\": \"The index of the revision that produced this element.\",\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                  },\n                  \"id\": {\n                    \"format\": \"int32\",\n                    \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                    \"type\": \"integer\"\n                  },\n                  \"parents\": {\n                    \"description\": \"References to the original elements that are replaced.\",\n                    \"items\": {\n                      \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"description\": \"The id of the parent provenance.\",\n                          \"format\": \"int32\"\n                        },\n                        \"revision\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                          \"type\": \"integer\"\n                        },\n                        \"index\": {\n                          \"format\": \"int32\",\n                          \"type\": \"integer\",\n                          \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"type\": {\n                    \"description\": \"The type of provenance operation.\",\n                    \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                    \"type\": \"string\",\n                    \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                  }\n                },\n                \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n              },\n              \"detectedLanguages\": {\n                \"items\": {\n                  \"description\": \"Detected language for a structural component.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"confidence\": {\n                      \"format\": \"float\",\n                      \"type\": \"number\",\n                      \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                    },\n                    \"languageCode\": {\n                      \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"type\": \"array\",\n                \"description\": \"A list of detected languages together with confidence.\"\n              },\n              \"image\": {\n                \"properties\": {\n                  \"width\": {\n                    \"format\": \"int32\",\n                    \"description\": \"Width of the image in pixels.\",\n                    \"type\": \"integer\"\n                  },\n                  \"height\": {\n                    \"format\": \"int32\",\n                    \"description\": \"Height of the image in pixels.\",\n                    \"type\": \"integer\"\n                  },\n                  \"mimeType\": {\n                    \"type\": \"string\",\n                    \"description\": \"Encoding [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml) for the image.\"\n                  },\n                  \"content\": {\n                    \"type\": \"string\",\n                    \"description\": \"Raw byte content of the image.\",\n                    \"format\": \"byte\"\n                  }\n                },\n                \"type\": \"object\",\n                \"description\": \"Rendered image contents for this page.\"\n              },\n              \"dimension\": {\n                \"properties\": {\n                  \"height\": {\n                    \"description\": \"Page height.\",\n                    \"type\": \"number\",\n                    \"format\": \"float\"\n                  },\n                  \"unit\": {\n                    \"description\": \"Dimension unit.\",\n                    \"type\": \"string\"\n                  },\n                  \"width\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\",\n                    \"description\": \"Page width.\"\n                  }\n                },\n                \"description\": \"Dimension for the page.\",\n                \"type\": \"object\"\n              },\n              \"lines\": {\n                \"description\": \"A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                              },\n                              \"index\": {\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A collection of tokens that a human would perceive as a line. Does not cross column boundaries, can be horizontal, vertical, etc.\",\n                  \"type\": \"object\"\n                }\n              },\n              \"layout\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"confidence\": {\n                    \"format\": \"float\",\n                    \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                    \"type\": \"number\"\n                  },\n                  \"orientation\": {\n                    \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                    \"type\": \"string\",\n                    \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                    \"description\": \"Detected orientation for the Layout.\"\n                  },\n                  \"boundingPoly\": {\n                    \"properties\": {\n                      \"normalizedVertices\": {\n                        \"description\": \"The bounding polygon normalized vertices.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                        }\n                      },\n                      \"vertices\": {\n                        \"description\": \"The bounding polygon vertices.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                        }\n                      }\n                    },\n                    \"type\": \"object\",\n                    \"description\": \"A bounding polygon for the detected image annotation.\"\n                  },\n                  \"textAnchor\": {\n                    \"properties\": {\n                      \"content\": {\n                        \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                        \"type\": \"string\"\n                      },\n                      \"textSegments\": {\n                        \"items\": {\n                        },\n                        \"type\": \"array\",\n                        \"description\": \"The text segments from the Document.text.\"\n                      }\n                    },\n                    \"description\": \"Text reference indexing into the Document.text.\",\n                    \"type\": \"object\"\n                  }\n                },\n                \"description\": \"Visual element describing a layout unit on a page.\"\n              },\n              \"pageNumber\": {\n                \"description\": \"1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.\",\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          },\n          \"description\": \"Visual page layout for the Document.\"\n        },\n        \"content\": {\n          \"type\": \"string\",\n          \"format\": \"byte\",\n          \"description\": \"Optional. Inline document content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64.\"\n        },\n        \"shardInfo\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"textOffset\": {\n              \"type\": \"string\",\n              \"description\": \"The index of the first character in Document.text in the overall document global text.\",\n              \"format\": \"int64\"\n            },\n            \"shardIndex\": {\n              \"description\": \"The 0-based index of this shard.\",\n              \"type\": \"string\",\n              \"format\": \"int64\"\n            },\n            \"shardCount\": {\n              \"description\": \"Total number of shards.\",\n              \"type\": \"string\",\n              \"format\": \"int64\"\n            }\n          },\n          \"description\": \"For a large document, sharding may be performed to produce several document shards. Each document shard contains this field to detail which shard it is.\"\n        },\n        \"textStyles\": {\n          \"type\": \"array\",\n          \"description\": \"Styles for the Document.text.\",\n          \"items\": {\n            \"description\": \"Annotation for common text style attributes. This adheres to CSS conventions as much as possible.\",\n            \"properties\": {\n              \"fontFamily\": {\n                \"description\": \"Font family such as `Arial`, `Times New Roman`. https://www.w3schools.com/cssref/pr_font_font-family.asp\",\n                \"type\": \"string\"\n              },\n              \"fontWeight\": {\n                \"type\": \"string\",\n                \"description\": \"[Font weight](https://www.w3schools.com/cssref/pr_font_weight.asp). Possible values are `normal`, `bold`, `bolder`, and `lighter`.\"\n              },\n              \"color\": {\n                \"properties\": {\n                  \"blue\": {\n                    \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"green\": {\n                    \"type\": \"number\",\n                    \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\"\n                  },\n                  \"alpha\": {\n                    \"type\": \"number\",\n                    \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                    \"format\": \"float\"\n                  },\n                  \"red\": {\n                    \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  }\n                },\n                \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                \"type\": \"object\"\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"textDecoration\": {\n                \"type\": \"string\",\n                \"description\": \"[Text decoration](https://www.w3schools.com/cssref/pr_text_text-decoration.asp). Follows CSS standard. \"\n              },\n              \"fontSize\": {\n                \"properties\": {\n                  \"size\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\",\n                    \"description\": \"Font size for the text.\"\n                  },\n                  \"unit\": {\n                    \"description\": \"Unit for the font size. Follows CSS naming (`in`, `px`, `pt`, etc.).\",\n                    \"type\": \"string\"\n                  }\n                },\n                \"description\": \"Font size with unit.\",\n                \"type\": \"object\"\n              },\n              \"backgroundColor\": {\n                \"properties\": {\n                  \"blue\": {\n                    \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"green\": {\n                    \"type\": \"number\",\n                    \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\"\n                  },\n                  \"alpha\": {\n                    \"type\": \"number\",\n                    \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                    \"format\": \"float\"\n                  },\n                  \"red\": {\n                    \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  }\n                },\n                \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                \"type\": \"object\"\n              },\n              \"textStyle\": {\n                \"type\": \"string\",\n                \"description\": \"[Text style](https://www.w3schools.com/cssref/pr_font_font-style.asp). Possible values are `normal`, `italic`, and `oblique`.\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"entities\": {\n          \"description\": \"A list of entities detected on Document.text. For document shards, entities in this list may cross shard boundaries.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n            \"properties\": {\n              \"provenance\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"revision\": {\n                  },\n                  \"id\": {\n                    \"format\": \"int32\",\n                    \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                    \"type\": \"integer\"\n                  },\n                  \"parents\": {\n                  },\n                  \"type\": {\n                  }\n                },\n                \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n              },\n              \"pageAnchor\": {\n                \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"pageRefs\": {\n                  }\n                }\n              },\n              \"mentionId\": {\n                \"type\": \"string\",\n                \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n              },\n              \"normalizedValue\": {\n                \"properties\": {\n                  \"datetimeValue\": {\n                  },\n                  \"integerValue\": {\n                  },\n                  \"addressValue\": {\n                  },\n                  \"dateValue\": {\n                  },\n                  \"floatValue\": {\n                  },\n                  \"booleanValue\": {\n                  },\n                  \"moneyValue\": {\n                  },\n                  \"text\": {\n                  }\n                },\n                \"type\": \"object\",\n                \"description\": \"Parsed and normalized entity value.\"\n              },\n              \"confidence\": {\n                \"type\": \"number\",\n                \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                \"format\": \"float\"\n              },\n              \"properties\": {\n                \"type\": \"array\",\n                \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                \"items\": {\n                  \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                        },\n                        \"type\": {\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"pageAnchor\": {\n                      \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"pageRefs\": {\n                        }\n                      }\n                    },\n                    \"mentionId\": {\n                      \"type\": \"string\",\n                      \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                    },\n                    \"normalizedValue\": {\n                      \"properties\": {\n                        \"datetimeValue\": {\n                        },\n                        \"integerValue\": {\n                        },\n                        \"addressValue\": {\n                        },\n                        \"dateValue\": {\n                        },\n                        \"floatValue\": {\n                        },\n                        \"booleanValue\": {\n                        },\n                        \"moneyValue\": {\n                        },\n                        \"text\": {\n                        }\n                      },\n                      \"type\": \"object\",\n                      \"description\": \"Parsed and normalized entity value.\"\n                    },\n                    \"confidence\": {\n                      \"type\": \"number\",\n                      \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                      \"format\": \"float\"\n                    },\n                    \"properties\": {\n                      \"type\": \"array\",\n                      \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                      \"items\": {\n                        \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                        \"properties\": {\n                          \"provenance\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"revision\": {\n                              },\n                              \"id\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                \"type\": \"integer\"\n                              },\n                              \"parents\": {\n                              },\n                              \"type\": {\n                              }\n                            },\n                            \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                          },\n                          \"pageAnchor\": {\n                            \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"pageRefs\": {\n                              }\n                            }\n                          },\n                          \"mentionId\": {\n                            \"type\": \"string\",\n                            \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                          },\n                          \"normalizedValue\": {\n                            \"properties\": {\n                              \"datetimeValue\": {\n                              },\n                              \"integerValue\": {\n                              },\n                              \"addressValue\": {\n                              },\n                              \"dateValue\": {\n                              },\n                              \"floatValue\": {\n                              },\n                              \"booleanValue\": {\n                              },\n                              \"moneyValue\": {\n                              },\n                              \"text\": {\n                              }\n                            },\n                            \"type\": \"object\",\n                            \"description\": \"Parsed and normalized entity value.\"\n                          },\n                          \"confidence\": {\n                            \"type\": \"number\",\n                            \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                            \"format\": \"float\"\n                          },\n                          \"properties\": {\n                            \"type\": \"array\",\n                            \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                            \"items\": {\n                              \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                              \"properties\": {\n                                \"provenance\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"revision\": {\n                                    },\n                                    \"id\": {\n                                      \"format\": \"int32\",\n                                      \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                      \"type\": \"integer\"\n                                    },\n                                    \"parents\": {\n                                    },\n                                    \"type\": {\n                                    }\n                                  },\n                                  \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                                },\n                                \"pageAnchor\": {\n                                  \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"pageRefs\": {\n                                    }\n                                  }\n                                },\n                                \"mentionId\": {\n                                  \"type\": \"string\",\n                                  \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                                },\n                                \"normalizedValue\": {\n                                  \"properties\": {\n                                    \"datetimeValue\": {\n                                    },\n                                    \"integerValue\": {\n                                    },\n                                    \"addressValue\": {\n                                    },\n                                    \"dateValue\": {\n                                    },\n                                    \"floatValue\": {\n                                    },\n                                    \"booleanValue\": {\n                                    },\n                                    \"moneyValue\": {\n                                    },\n                                    \"text\": {\n                                    }\n                                  },\n                                  \"type\": \"object\",\n                                  \"description\": \"Parsed and normalized entity value.\"\n                                },\n                                \"confidence\": {\n                                  \"type\": \"number\",\n                                  \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                                  \"format\": \"float\"\n                                },\n                                \"properties\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                                  \"items\": {\n                                    \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                                    \"properties\": {\n                                      \"provenance\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                          \"revision\": {\n                                          },\n                                          \"id\": {\n                                            \"format\": \"int32\",\n                                            \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                            \"type\": \"integer\"\n                                          },\n                                          \"parents\": {\n                                          },\n                                          \"type\": {\n                                          }\n                                        },\n                                        \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                                      },\n                                      \"pageAnchor\": {\n                                        \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                          \"pageRefs\": {\n                                          }\n                                        }\n                                      },\n                                      \"mentionId\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                                      },\n                                      \"normalizedValue\": {\n                                        \"properties\": {\n                                          \"datetimeValue\": {\n                                          },\n                                          \"integerValue\": {\n                                          },\n                                          \"addressValue\": {\n                                          },\n                                          \"dateValue\": {\n                                          },\n                                          \"floatValue\": {\n                                          },\n                                          \"booleanValue\": {\n                                          },\n                                          \"moneyValue\": {\n                                          },\n                                          \"text\": {\n                                          }\n                                        },\n                                        \"type\": \"object\",\n                                        \"description\": \"Parsed and normalized entity value.\"\n                                      },\n                                      \"confidence\": {\n                                        \"type\": \"number\",\n                                        \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                                        \"format\": \"float\"\n                                      },\n                                      \"properties\": {\n                                        \"type\": \"array\",\n                                        \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                                        \"items\": {\n                                          \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                                          \"properties\": {\n                                          },\n                                          \"type\": \"object\"\n                                        }\n                                      },\n                                      \"mentionText\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                                      },\n                                      \"id\": {\n                                        \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                                        \"type\": \"string\"\n                                      },\n                                      \"redacted\": {\n                                        \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                                        \"type\": \"boolean\"\n                                      },\n                                      \"textAnchor\": {\n                                        \"properties\": {\n                                          \"content\": {\n                                          },\n                                          \"textSegments\": {\n                                          }\n                                        },\n                                        \"description\": \"Text reference indexing into the Document.text.\",\n                                        \"type\": \"object\"\n                                      },\n                                      \"type\": {\n                                        \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    },\n                                    \"type\": \"object\"\n                                  }\n                                },\n                                \"mentionText\": {\n                                  \"type\": \"string\",\n                                  \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                                },\n                                \"id\": {\n                                  \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                                  \"type\": \"string\"\n                                },\n                                \"redacted\": {\n                                  \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                                  \"type\": \"boolean\"\n                                },\n                                \"textAnchor\": {\n                                  \"properties\": {\n                                    \"content\": {\n                                    },\n                                    \"textSegments\": {\n                                    }\n                                  },\n                                  \"description\": \"Text reference indexing into the Document.text.\",\n                                  \"type\": \"object\"\n                                },\n                                \"type\": {\n                                  \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                                  \"type\": \"string\"\n                                }\n                              },\n                              \"type\": \"object\"\n                            }\n                          },\n                          \"mentionText\": {\n                            \"type\": \"string\",\n                            \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                          },\n                          \"id\": {\n                            \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                            \"type\": \"string\"\n                          },\n                          \"redacted\": {\n                            \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                            \"type\": \"boolean\"\n                          },\n                          \"textAnchor\": {\n                            \"properties\": {\n                              \"content\": {\n                              },\n                              \"textSegments\": {\n                              }\n                            },\n                            \"description\": \"Text reference indexing into the Document.text.\",\n                            \"type\": \"object\"\n                          },\n                          \"type\": {\n                            \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"type\": \"object\"\n                      }\n                    },\n                    \"mentionText\": {\n                      \"type\": \"string\",\n                      \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                    },\n                    \"id\": {\n                      \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                      \"type\": \"string\"\n                    },\n                    \"redacted\": {\n                      \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                      \"type\": \"boolean\"\n                    },\n                    \"textAnchor\": {\n                      \"properties\": {\n                        \"content\": {\n                        },\n                        \"textSegments\": {\n                        }\n                      },\n                      \"description\": \"Text reference indexing into the Document.text.\",\n                      \"type\": \"object\"\n                    },\n                    \"type\": {\n                      \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              },\n              \"mentionText\": {\n                \"type\": \"string\",\n                \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n              },\n              \"id\": {\n                \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                \"type\": \"string\"\n              },\n              \"redacted\": {\n                \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                \"type\": \"boolean\"\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"type\": {\n                \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                \"type\": \"string\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"textChanges\": {\n          \"type\": \"array\",\n          \"description\": \"Placeholder. A list of text corrections made to Document.text. This is usually used for annotating corrections to OCR mistakes. Text changes for a given revision may not overlap with each other.\",\n          \"items\": {\n            \"description\": \"This message is used for text changes aka. OCR corrections.\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"provenance\": {\n                \"description\": \"The history of this annotation.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"revision\": {\n                      \"description\": \"The index of the revision that produced this element.\",\n                      \"type\": \"integer\",\n                      \"format\": \"int32\"\n                    },\n                    \"id\": {\n                      \"format\": \"int32\",\n                      \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                      \"type\": \"integer\"\n                    },\n                    \"parents\": {\n                      \"description\": \"References to the original elements that are replaced.\",\n                      \"items\": {\n                        \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"integer\",\n                            \"description\": \"The id of the parent provenance.\",\n                            \"format\": \"int32\"\n                          },\n                          \"revision\": {\n                          },\n                          \"index\": {\n                          }\n                        },\n                        \"type\": \"object\"\n                      },\n                      \"type\": \"array\"\n                    },\n                    \"type\": {\n                      \"description\": \"The type of provenance operation.\",\n                      \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                      \"type\": \"string\",\n                      \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                    }\n                  },\n                  \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                }\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"changedText\": {\n                \"type\": \"string\",\n                \"description\": \"The text that replaces the text identified in the `text_anchor`.\"\n              }\n            }\n          }\n        },\n        \"uri\": {\n          \"type\": \"string\",\n          \"description\": \"Optional. Currently supports Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. For more information, refer to [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris).\"\n        },\n        \"text\": {\n          \"type\": \"string\",\n          \"description\": \"Optional. UTF-8 encoded text in reading order from the document.\"\n        },\n        \"entityRelations\": {\n          \"description\": \"Placeholder. Relationship among Document.entities.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"Relationship between Entities.\",\n            \"properties\": {\n              \"subjectId\": {\n                \"description\": \"Subject entity id.\",\n                \"type\": \"string\"\n              },\n              \"relation\": {\n                \"description\": \"Relationship description.\",\n                \"type\": \"string\"\n              },\n              \"objectId\": {\n                \"type\": \"string\",\n                \"description\": \"Object entity id.\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"mimeType\": {\n          \"description\": \"An IANA published [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml).\",\n          \"type\": \"string\"\n        },\n        \"error\": {\n          \"properties\": {\n            \"message\": {\n              \"description\": \"A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.\",\n              \"type\": \"string\"\n            },\n            \"details\": {\n              \"items\": {\n                \"additionalProperties\": {\n                  \"type\": \"any\",\n                  \"description\": \"Properties of the object. Contains field @type with type URL.\"\n                },\n                \"type\": \"object\"\n              },\n              \"description\": \"A list of messages that carry the error details. There is a common set of message types for APIs to use.\",\n              \"type\": \"array\"\n            },\n            \"code\": {\n              \"type\": \"integer\",\n              \"description\": \"The status code, which should be an enum value of google.rpc.Code.\",\n              \"format\": \"int32\"\n            }\n          },\n          \"type\": \"object\",\n          \"description\": \"The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).\"\n        }\n      },\n      \"type\": \"object\",\n      \"description\": \"Document represents the canonical document resource in Document AI. It is an interchange format that provides insights into documents and allows for collaboration between users and Document AI to iterate and optimize for quality.\"\n    },\n    \"fieldMask\": {\n      \"description\": \"Specifies which fields to include in the ProcessResponse.document output. Only supports top-level document and pages field, so it must be in the form of `{document_field_name}` or `pages.{page_field_name}`.\",\n      \"format\": \"google-fieldmask\",\n      \"type\": \"string\"\n    }\n  }\n}"
  }, {
    "key": "`Task_26_response`",
    "dataType": "JSON_VALUE",
    "displayName": "`Task_26_response`",
    "isTransient": true,
    "producer": "1_26",
    "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"humanReviewStatus\": {\n      \"properties\": {\n        \"state\": {\n          \"type\": \"string\",\n          \"enumDescriptions\": [\"Human review state is unspecified. Most likely due to an internal error.\", \"Human review is skipped for the document. This can happen because human review isn\\u0027t enabled on the processor or the processing request has been set to skip this document.\", \"Human review validation is triggered and passed, so no review is needed.\", \"Human review validation is triggered and the document is under review.\", \"Some error happened during triggering human review, see the state_message for details.\"],\n          \"description\": \"The state of human review on the processing request.\",\n          \"enum\": [\"STATE_UNSPECIFIED\", \"SKIPPED\", \"VALIDATION_PASSED\", \"IN_PROGRESS\", \"ERROR\"]\n        },\n        \"stateMessage\": {\n          \"description\": \"A message providing more details about the human review state.\",\n          \"type\": \"string\"\n        },\n        \"humanReviewOperation\": {\n          \"description\": \"The name of the operation triggered by the processed document. This field is populated only when the state is `HUMAN_REVIEW_IN_PROGRESS`. It has the same response type and metadata as the long-running operation returned by ReviewDocument.\",\n          \"type\": \"string\"\n        }\n      },\n      \"description\": \"The status of human review on a processed document.\",\n      \"type\": \"object\"\n    },\n    \"document\": {\n      \"properties\": {\n        \"revisions\": {\n          \"description\": \"Placeholder. Revision history of this document.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"description\": \"Contains past or forward revisions of this document.\",\n            \"properties\": {\n              \"agent\": {\n                \"type\": \"string\",\n                \"description\": \"If the change was made by a person specify the name or id of that person.\"\n              },\n              \"createTime\": {\n                \"format\": \"google-datetime\",\n                \"description\": \"The time that the revision was created, internally generated by doc proto storage at the time of create.\",\n                \"type\": \"string\"\n              },\n              \"humanReview\": {\n                \"description\": \"Human Review information of the document.\",\n                \"properties\": {\n                  \"stateMessage\": {\n                    \"description\": \"A message providing more details about the current state of processing. For example, the rejection reason when the state is `rejected`.\",\n                    \"type\": \"string\"\n                  },\n                  \"state\": {\n                    \"description\": \"Human review state. e.g. `requested`, `succeeded`, `rejected`.\",\n                    \"type\": \"string\"\n                  }\n                },\n                \"type\": \"object\"\n              },\n              \"parentIds\": {\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"array\",\n                \"description\": \"The revisions that this revision is based on. Must include all the ids that have anything to do with this revision - eg. there are `provenance.parent.revision` fields that index into this field.\"\n              },\n              \"parent\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"format\": \"int32\",\n                  \"type\": \"integer\"\n                },\n                \"description\": \"The revisions that this revision is based on. This can include one or more parent (when documents are merged.) This field represents the index into the `revisions` field.\"\n              },\n              \"id\": {\n                \"description\": \"Id of the revision, internally generated by doc proto storage. Unique within the context of the document.\",\n                \"type\": \"string\"\n              },\n              \"processor\": {\n                \"type\": \"string\",\n                \"description\": \"If the annotation was made by processor identify the processor by its resource name.\"\n              }\n            }\n          }\n        },\n        \"pages\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"A page in a Document.\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"transforms\": {\n                \"type\": \"array\",\n                \"description\": \"Transformation matrices that were applied to the original document image to produce Page.image.\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"description\": \"Representation for transformation matrix, intended to be compatible and used with OpenCV format for image manipulation.\",\n                  \"properties\": {\n                    \"cols\": {\n                      \"format\": \"int32\",\n                      \"type\": \"integer\",\n                      \"description\": \"Number of columns in the matrix.\"\n                    },\n                    \"type\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\",\n                      \"description\": \"This encodes information about what data type the matrix uses. For example, 0 (CV_8U) is an unsigned 8-bit image. For the full list of OpenCV primitive data types, please refer to https://docs.opencv.org/4.3.0/d1/d1b/group__core__hal__interface.html\"\n                    },\n                    \"rows\": {\n                      \"description\": \"Number of rows in the matrix.\",\n                      \"format\": \"int32\",\n                      \"type\": \"integer\"\n                    },\n                    \"data\": {\n                      \"description\": \"The matrix data.\",\n                      \"type\": \"string\",\n                      \"format\": \"byte\"\n                    }\n                  }\n                }\n              },\n              \"formFields\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected form fields on the page.\",\n                \"items\": {\n                  \"description\": \"A form field detected on the page.\",\n                  \"properties\": {\n                    \"fieldValue\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"fieldName\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"correctedKeyText\": {\n                      \"description\": \"Created for Labeling UI to export key text. If corrections were made to the text identified by the `field_name.text_anchor`, this field will contain the correction.\",\n                      \"type\": \"string\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"correctedValueText\": {\n                      \"description\": \"Created for Labeling UI to export value text. If corrections were made to the text identified by the `field_value.text_anchor`, this field will contain the correction.\",\n                      \"type\": \"string\"\n                    },\n                    \"valueDetectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages for value together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"valueType\": {\n                      \"type\": \"string\",\n                      \"description\": \"If the value is non-textual, this field represents the type. Current valid values are: - blank (this indicates the `field_value` is normal text) - `unfilled_checkbox` - `filled_checkbox`\"\n                    },\n                    \"nameDetectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages for name together with confidence.\",\n                      \"type\": \"array\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              },\n              \"symbols\": {\n                \"description\": \"A list of visually detected symbols on the page.\",\n                \"items\": {\n                  \"properties\": {\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"type\": \"array\"\n                    }\n                  },\n                  \"description\": \"A detected symbol.\",\n                  \"type\": \"object\"\n                },\n                \"type\": \"array\"\n              },\n              \"tables\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected tables on the page.\",\n                \"items\": {\n                  \"description\": \"A table representation similar to HTML table structure.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"type\": \"array\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"bodyRows\": {\n                      \"description\": \"Body rows of the table.\",\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"description\": \"A row of table cells.\",\n                        \"properties\": {\n                          \"cells\": {\n                            \"items\": {\n                              \"properties\": {\n                                \"colSpan\": {\n                                  \"type\": \"integer\",\n                                  \"description\": \"How many columns this cell spans.\",\n                                  \"format\": \"int32\"\n                                },\n                                \"detectedLanguages\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"A list of detected languages together with confidence.\",\n                                  \"items\": {\n                                    \"description\": \"Detected language for a structural component.\",\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                      \"confidence\": {\n                                        \"format\": \"float\",\n                                        \"type\": \"number\",\n                                        \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                                      },\n                                      \"languageCode\": {\n                                        \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    }\n                                  }\n                                },\n                                \"layout\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"confidence\": {\n                                      \"format\": \"float\",\n                                      \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                                      \"type\": \"number\"\n                                    },\n                                    \"orientation\": {\n                                      \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                                      \"type\": \"string\",\n                                      \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                                      \"description\": \"Detected orientation for the Layout.\"\n                                    },\n                                    \"boundingPoly\": {\n                                      \"properties\": {\n                                        \"normalizedVertices\": {\n                                          \"description\": \"The bounding polygon normalized vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        },\n                                        \"vertices\": {\n                                          \"description\": \"The bounding polygon vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        }\n                                      },\n                                      \"type\": \"object\",\n                                      \"description\": \"A bounding polygon for the detected image annotation.\"\n                                    },\n                                    \"textAnchor\": {\n                                      \"properties\": {\n                                        \"content\": {\n                                          \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                                          \"type\": \"string\"\n                                        },\n                                        \"textSegments\": {\n                                          \"items\": {\n                                          },\n                                          \"type\": \"array\",\n                                          \"description\": \"The text segments from the Document.text.\"\n                                        }\n                                      },\n                                      \"description\": \"Text reference indexing into the Document.text.\",\n                                      \"type\": \"object\"\n                                    }\n                                  },\n                                  \"description\": \"Visual element describing a layout unit on a page.\"\n                                },\n                                \"rowSpan\": {\n                                  \"format\": \"int32\",\n                                  \"description\": \"How many rows this cell spans.\",\n                                  \"type\": \"integer\"\n                                }\n                              },\n                              \"description\": \"A cell representation inside the table.\",\n                              \"type\": \"object\"\n                            },\n                            \"description\": \"Cells that make up this row.\",\n                            \"type\": \"array\"\n                          }\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"headerRows\": {\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"description\": \"A row of table cells.\",\n                        \"properties\": {\n                          \"cells\": {\n                            \"items\": {\n                              \"properties\": {\n                                \"colSpan\": {\n                                  \"type\": \"integer\",\n                                  \"description\": \"How many columns this cell spans.\",\n                                  \"format\": \"int32\"\n                                },\n                                \"detectedLanguages\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"A list of detected languages together with confidence.\",\n                                  \"items\": {\n                                    \"description\": \"Detected language for a structural component.\",\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                      \"confidence\": {\n                                        \"format\": \"float\",\n                                        \"type\": \"number\",\n                                        \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                                      },\n                                      \"languageCode\": {\n                                        \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    }\n                                  }\n                                },\n                                \"layout\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"confidence\": {\n                                      \"format\": \"float\",\n                                      \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                                      \"type\": \"number\"\n                                    },\n                                    \"orientation\": {\n                                      \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                                      \"type\": \"string\",\n                                      \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                                      \"description\": \"Detected orientation for the Layout.\"\n                                    },\n                                    \"boundingPoly\": {\n                                      \"properties\": {\n                                        \"normalizedVertices\": {\n                                          \"description\": \"The bounding polygon normalized vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        },\n                                        \"vertices\": {\n                                          \"description\": \"The bounding polygon vertices.\",\n                                          \"type\": \"array\",\n                                          \"items\": {\n                                          }\n                                        }\n                                      },\n                                      \"type\": \"object\",\n                                      \"description\": \"A bounding polygon for the detected image annotation.\"\n                                    },\n                                    \"textAnchor\": {\n                                      \"properties\": {\n                                        \"content\": {\n                                          \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                                          \"type\": \"string\"\n                                        },\n                                        \"textSegments\": {\n                                          \"items\": {\n                                          },\n                                          \"type\": \"array\",\n                                          \"description\": \"The text segments from the Document.text.\"\n                                        }\n                                      },\n                                      \"description\": \"Text reference indexing into the Document.text.\",\n                                      \"type\": \"object\"\n                                    }\n                                  },\n                                  \"description\": \"Visual element describing a layout unit on a page.\"\n                                },\n                                \"rowSpan\": {\n                                  \"format\": \"int32\",\n                                  \"description\": \"How many rows this cell spans.\",\n                                  \"type\": \"integer\"\n                                }\n                              },\n                              \"description\": \"A cell representation inside the table.\",\n                              \"type\": \"object\"\n                            },\n                            \"description\": \"Cells that make up this row.\",\n                            \"type\": \"array\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"Header rows of the table.\"\n                    }\n                  }\n                }\n              },\n              \"blocks\": {\n                \"description\": \"A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"description\": \"A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    }\n                  }\n                }\n              },\n              \"visualElements\": {\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"type\": {\n                      \"description\": \"Type of the VisualElement.\",\n                      \"type\": \"string\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    }\n                  },\n                  \"description\": \"Detected non-text visual elements e.g. checkbox, signature etc. on the page.\"\n                },\n                \"description\": \"A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.\",\n                \"type\": \"array\"\n              },\n              \"imageQualityScores\": {\n                \"description\": \"Image Quality Scores for the page image.\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"qualityScore\": {\n                    \"description\": \"The overall quality score. Range `[0, 1]` where `1` is perfect quality.\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"detectedDefects\": {\n                    \"items\": {\n                      \"description\": \"Image Quality Defects\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"type\": \"number\",\n                          \"description\": \"Confidence of detected defect. Range `[0, 1]` where `1` indicates strong confidence of that the defect exists.\",\n                          \"format\": \"float\"\n                        },\n                        \"type\": {\n                          \"description\": \"Name of the defect type. Supported values are: - `quality/defect_blurry` - `quality/defect_noisy` - `quality/defect_dark` - `quality/defect_faint` - `quality/defect_text_too_small` - `quality/defect_document_cutoff` - `quality/defect_text_cutoff` - `quality/defect_glare`\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\",\n                    \"description\": \"A list of detected defects.\"\n                  }\n                }\n              },\n              \"tokens\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    },\n                    \"detectedBreak\": {\n                      \"properties\": {\n                        \"type\": {\n                          \"enumDescriptions\": [\"Unspecified break type.\", \"A single whitespace.\", \"A wider whitespace.\", \"A hyphen that indicates that a token has been split across lines.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"TYPE_UNSPECIFIED\", \"SPACE\", \"WIDE_SPACE\", \"HYPHEN\"],\n                          \"description\": \"Detected break type.\"\n                        }\n                      },\n                      \"description\": \"Detected break at the end of a Token.\",\n                      \"type\": \"object\"\n                    },\n                    \"styleInfo\": {\n                      \"type\": \"object\",\n                      \"description\": \"Font and other text style attributes.\",\n                      \"properties\": {\n                        \"bold\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is bold (equivalent to font_weight is at least `700`).\"\n                        },\n                        \"strikeout\": {\n                          \"description\": \"Whether the text is strikethrough.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"letterSpacing\": {\n                          \"type\": \"number\",\n                          \"description\": \"Letter spacing in points.\",\n                          \"format\": \"double\"\n                        },\n                        \"textColor\": {\n                          \"properties\": {\n                            \"blue\": {\n                              \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            },\n                            \"green\": {\n                              \"type\": \"number\",\n                              \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\"\n                            },\n                            \"alpha\": {\n                              \"type\": \"number\",\n                              \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                              \"format\": \"float\"\n                            },\n                            \"red\": {\n                              \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            }\n                          },\n                          \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                          \"type\": \"object\"\n                        },\n                        \"backgroundColor\": {\n                          \"properties\": {\n                            \"blue\": {\n                              \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            },\n                            \"green\": {\n                              \"type\": \"number\",\n                              \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\"\n                            },\n                            \"alpha\": {\n                              \"type\": \"number\",\n                              \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                              \"format\": \"float\"\n                            },\n                            \"red\": {\n                              \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                              \"format\": \"float\",\n                              \"type\": \"number\"\n                            }\n                          },\n                          \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                          \"type\": \"object\"\n                        },\n                        \"fontWeight\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int32\",\n                          \"description\": \"TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy). Normal is `400`, bold is `700`.\"\n                        },\n                        \"italic\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is italic.\"\n                        },\n                        \"pixelFontSize\": {\n                          \"format\": \"double\",\n                          \"type\": \"number\",\n                          \"description\": \"Font size in pixels, equal to _unrounded font_size_ * _resolution_ ÷ `72.0`.\"\n                        },\n                        \"smallcaps\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is in small caps.\"\n                        },\n                        \"superscript\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is a superscript.\"\n                        },\n                        \"underlined\": {\n                          \"description\": \"Whether the text is underlined.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"fontType\": {\n                          \"type\": \"string\",\n                          \"description\": \"Name or style of the font.\"\n                        },\n                        \"subscript\": {\n                          \"description\": \"Whether the text is a subscript.\",\n                          \"type\": \"boolean\"\n                        },\n                        \"handwritten\": {\n                          \"type\": \"boolean\",\n                          \"description\": \"Whether the text is handwritten.\"\n                        },\n                        \"fontSize\": {\n                          \"description\": \"Font size in points (`1` point is `¹⁄₇₂` inches).\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"type\": \"object\",\n                  \"description\": \"A detected token.\"\n                },\n                \"description\": \"A list of visually detected tokens on the page.\"\n              },\n              \"detectedBarcodes\": {\n                \"description\": \"A list of detected barcodes.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"barcode\": {\n                      \"description\": \"Encodes the detailed information of a barcode.\",\n                      \"properties\": {\n                        \"valueFormat\": {\n                          \"type\": \"string\",\n                          \"description\": \"Value format describes the format of the value that a barcode encodes. The supported formats are: - `CONTACT_INFO`: Contact information. - `EMAIL`: Email address. - `ISBN`: ISBN identifier. - `PHONE`: Phone number. - `PRODUCT`: Product. - `SMS`: SMS message. - `TEXT`: Text string. - `URL`: URL address. - `WIFI`: Wifi information. - `GEO`: Geo-localization. - `CALENDAR_EVENT`: Calendar event. - `DRIVER_LICENSE`: Driver\\u0027s license.\"\n                        },\n                        \"rawValue\": {\n                          \"type\": \"string\",\n                          \"description\": \"Raw value encoded in the barcode. For example: `\\u0027MEBKM:TITLE:Google;URL:https://www.google.com;;\\u0027`.\"\n                        },\n                        \"format\": {\n                          \"description\": \"Format of a barcode. The supported formats are: - `CODE_128`: Code 128 type. - `CODE_39`: Code 39 type. - `CODE_93`: Code 93 type. - `CODABAR`: Codabar type. - `DATA_MATRIX`: 2D Data Matrix type. - `ITF`: ITF type. - `EAN_13`: EAN-13 type. - `EAN_8`: EAN-8 type. - `QR_CODE`: 2D QR code type. - `UPC_A`: UPC-A type. - `UPC_E`: UPC-E type. - `PDF417`: PDF417 type. - `AZTEC`: 2D Aztec code type. - `DATABAR`: GS1 DataBar code type.\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A detected barcode.\",\n                  \"type\": \"object\"\n                }\n              },\n              \"paragraphs\": {\n                \"type\": \"array\",\n                \"description\": \"A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                                \"type\": \"integer\"\n                              },\n                              \"index\": {\n                                \"format\": \"int32\",\n                                \"type\": \"integer\",\n                                \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"description\": \"A list of detected languages together with confidence.\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A collection of lines that a human would perceive as a paragraph.\"\n                }\n              },\n              \"provenance\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"revision\": {\n                    \"description\": \"The index of the revision that produced this element.\",\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                  },\n                  \"id\": {\n                    \"format\": \"int32\",\n                    \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                    \"type\": \"integer\"\n                  },\n                  \"parents\": {\n                    \"description\": \"References to the original elements that are replaced.\",\n                    \"items\": {\n                      \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"description\": \"The id of the parent provenance.\",\n                          \"format\": \"int32\"\n                        },\n                        \"revision\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The index of the index into current revision\\u0027s parent_ids list.\",\n                          \"type\": \"integer\"\n                        },\n                        \"index\": {\n                          \"format\": \"int32\",\n                          \"type\": \"integer\",\n                          \"description\": \"The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.\"\n                        }\n                      },\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"type\": {\n                    \"description\": \"The type of provenance operation.\",\n                    \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                    \"type\": \"string\",\n                    \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                  }\n                },\n                \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n              },\n              \"detectedLanguages\": {\n                \"items\": {\n                  \"description\": \"Detected language for a structural component.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"confidence\": {\n                      \"format\": \"float\",\n                      \"type\": \"number\",\n                      \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                    },\n                    \"languageCode\": {\n                      \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"type\": \"array\",\n                \"description\": \"A list of detected languages together with confidence.\"\n              },\n              \"image\": {\n                \"properties\": {\n                  \"width\": {\n                    \"format\": \"int32\",\n                    \"description\": \"Width of the image in pixels.\",\n                    \"type\": \"integer\"\n                  },\n                  \"height\": {\n                    \"format\": \"int32\",\n                    \"description\": \"Height of the image in pixels.\",\n                    \"type\": \"integer\"\n                  },\n                  \"mimeType\": {\n                    \"type\": \"string\",\n                    \"description\": \"Encoding [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml) for the image.\"\n                  },\n                  \"content\": {\n                    \"type\": \"string\",\n                    \"description\": \"Raw byte content of the image.\",\n                    \"format\": \"byte\"\n                  }\n                },\n                \"type\": \"object\",\n                \"description\": \"Rendered image contents for this page.\"\n              },\n              \"dimension\": {\n                \"properties\": {\n                  \"height\": {\n                    \"description\": \"Page height.\",\n                    \"type\": \"number\",\n                    \"format\": \"float\"\n                  },\n                  \"unit\": {\n                    \"description\": \"Dimension unit.\",\n                    \"type\": \"string\"\n                  },\n                  \"width\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\",\n                    \"description\": \"Page width.\"\n                  }\n                },\n                \"description\": \"Dimension for the page.\",\n                \"type\": \"object\"\n              },\n              \"lines\": {\n                \"description\": \"A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"properties\": {\n                    \"detectedLanguages\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"description\": \"Detected language for a structural component.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"confidence\": {\n                            \"format\": \"float\",\n                            \"type\": \"number\",\n                            \"description\": \"Confidence of detected language. Range `[0, 1]`.\"\n                          },\n                          \"languageCode\": {\n                            \"description\": \"The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.\",\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"description\": \"A list of detected languages together with confidence.\"\n                    },\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                          \"description\": \"The index of the revision that produced this element.\",\n                          \"type\": \"integer\",\n                          \"format\": \"int32\"\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                          \"description\": \"References to the original elements that are replaced.\",\n                          \"items\": {\n                            \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                            \"properties\": {\n                              \"id\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The id of the parent provenance.\",\n                                \"format\": \"int32\"\n                              },\n                              \"revision\": {\n                              },\n                              \"index\": {\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"type\": \"array\"\n                        },\n                        \"type\": {\n                          \"description\": \"The type of provenance operation.\",\n                          \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"layout\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"confidence\": {\n                          \"format\": \"float\",\n                          \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                          \"type\": \"number\"\n                        },\n                        \"orientation\": {\n                          \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                          \"type\": \"string\",\n                          \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                          \"description\": \"Detected orientation for the Layout.\"\n                        },\n                        \"boundingPoly\": {\n                          \"properties\": {\n                            \"normalizedVertices\": {\n                              \"description\": \"The bounding polygon normalized vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            },\n                            \"vertices\": {\n                              \"description\": \"The bounding polygon vertices.\",\n                              \"type\": \"array\",\n                              \"items\": {\n                              }\n                            }\n                          },\n                          \"type\": \"object\",\n                          \"description\": \"A bounding polygon for the detected image annotation.\"\n                        },\n                        \"textAnchor\": {\n                          \"properties\": {\n                            \"content\": {\n                              \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                              \"type\": \"string\"\n                            },\n                            \"textSegments\": {\n                              \"items\": {\n                              },\n                              \"type\": \"array\",\n                              \"description\": \"The text segments from the Document.text.\"\n                            }\n                          },\n                          \"description\": \"Text reference indexing into the Document.text.\",\n                          \"type\": \"object\"\n                        }\n                      },\n                      \"description\": \"Visual element describing a layout unit on a page.\"\n                    }\n                  },\n                  \"description\": \"A collection of tokens that a human would perceive as a line. Does not cross column boundaries, can be horizontal, vertical, etc.\",\n                  \"type\": \"object\"\n                }\n              },\n              \"layout\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"confidence\": {\n                    \"format\": \"float\",\n                    \"description\": \"Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.\",\n                    \"type\": \"number\"\n                  },\n                  \"orientation\": {\n                    \"enumDescriptions\": [\"Unspecified orientation.\", \"Orientation is aligned with page up.\", \"Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.\", \"Orientation is aligned with page down. Turn the head 180 degrees from upright to read.\", \"Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.\"],\n                    \"type\": \"string\",\n                    \"enum\": [\"ORIENTATION_UNSPECIFIED\", \"PAGE_UP\", \"PAGE_RIGHT\", \"PAGE_DOWN\", \"PAGE_LEFT\"],\n                    \"description\": \"Detected orientation for the Layout.\"\n                  },\n                  \"boundingPoly\": {\n                    \"properties\": {\n                      \"normalizedVertices\": {\n                        \"description\": \"The bounding polygon normalized vertices.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                        }\n                      },\n                      \"vertices\": {\n                        \"description\": \"The bounding polygon vertices.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                        }\n                      }\n                    },\n                    \"type\": \"object\",\n                    \"description\": \"A bounding polygon for the detected image annotation.\"\n                  },\n                  \"textAnchor\": {\n                    \"properties\": {\n                      \"content\": {\n                        \"description\": \"Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.\",\n                        \"type\": \"string\"\n                      },\n                      \"textSegments\": {\n                        \"items\": {\n                        },\n                        \"type\": \"array\",\n                        \"description\": \"The text segments from the Document.text.\"\n                      }\n                    },\n                    \"description\": \"Text reference indexing into the Document.text.\",\n                    \"type\": \"object\"\n                  }\n                },\n                \"description\": \"Visual element describing a layout unit on a page.\"\n              },\n              \"pageNumber\": {\n                \"description\": \"1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.\",\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          },\n          \"description\": \"Visual page layout for the Document.\"\n        },\n        \"content\": {\n          \"type\": \"string\",\n          \"format\": \"byte\",\n          \"description\": \"Optional. Inline document content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64.\"\n        },\n        \"shardInfo\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"textOffset\": {\n              \"type\": \"string\",\n              \"description\": \"The index of the first character in Document.text in the overall document global text.\",\n              \"format\": \"int64\"\n            },\n            \"shardIndex\": {\n              \"description\": \"The 0-based index of this shard.\",\n              \"type\": \"string\",\n              \"format\": \"int64\"\n            },\n            \"shardCount\": {\n              \"description\": \"Total number of shards.\",\n              \"type\": \"string\",\n              \"format\": \"int64\"\n            }\n          },\n          \"description\": \"For a large document, sharding may be performed to produce several document shards. Each document shard contains this field to detail which shard it is.\"\n        },\n        \"textStyles\": {\n          \"type\": \"array\",\n          \"description\": \"Styles for the Document.text.\",\n          \"items\": {\n            \"description\": \"Annotation for common text style attributes. This adheres to CSS conventions as much as possible.\",\n            \"properties\": {\n              \"fontFamily\": {\n                \"description\": \"Font family such as `Arial`, `Times New Roman`. https://www.w3schools.com/cssref/pr_font_font-family.asp\",\n                \"type\": \"string\"\n              },\n              \"fontWeight\": {\n                \"type\": \"string\",\n                \"description\": \"[Font weight](https://www.w3schools.com/cssref/pr_font_weight.asp). Possible values are `normal`, `bold`, `bolder`, and `lighter`.\"\n              },\n              \"color\": {\n                \"properties\": {\n                  \"blue\": {\n                    \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"green\": {\n                    \"type\": \"number\",\n                    \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\"\n                  },\n                  \"alpha\": {\n                    \"type\": \"number\",\n                    \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                    \"format\": \"float\"\n                  },\n                  \"red\": {\n                    \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  }\n                },\n                \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                \"type\": \"object\"\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"textDecoration\": {\n                \"type\": \"string\",\n                \"description\": \"[Text decoration](https://www.w3schools.com/cssref/pr_text_text-decoration.asp). Follows CSS standard. \"\n              },\n              \"fontSize\": {\n                \"properties\": {\n                  \"size\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\",\n                    \"description\": \"Font size for the text.\"\n                  },\n                  \"unit\": {\n                    \"description\": \"Unit for the font size. Follows CSS naming (`in`, `px`, `pt`, etc.).\",\n                    \"type\": \"string\"\n                  }\n                },\n                \"description\": \"Font size with unit.\",\n                \"type\": \"object\"\n              },\n              \"backgroundColor\": {\n                \"properties\": {\n                  \"blue\": {\n                    \"description\": \"The amount of blue in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  },\n                  \"green\": {\n                    \"type\": \"number\",\n                    \"description\": \"The amount of green in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\"\n                  },\n                  \"alpha\": {\n                    \"type\": \"number\",\n                    \"description\": \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color \\u003d alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\",\n                    \"format\": \"float\"\n                  },\n                  \"red\": {\n                    \"description\": \"The amount of red in the color as a value in the interval [0, 1].\",\n                    \"format\": \"float\",\n                    \"type\": \"number\"\n                  }\n                },\n                \"description\": \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor\\u0027s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page does not have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha \\u003d protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red \\u003d (float) color.getRed(); float green \\u003d (float) color.getGreen(); float blue \\u003d (float) color.getBlue(); float denominator \\u003d 255.0; Color.Builder resultBuilder \\u003d Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha \\u003d color.getAlpha(); if (alpha !\\u003d 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red \\u003d [protocolor red]; float green \\u003d [protocolor green]; float blue \\u003d [protocolor blue]; FloatValue* alpha_wrapper \\u003d [protocolor alpha]; float alpha \\u003d 1.0; if (alpha_wrapper !\\u003d nil) { alpha \\u003d [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\\u0026red green:\\u0026green blue:\\u0026blue alpha:\\u0026alpha]) { return nil; } Color* result \\u003d [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \\u003c\\u003d 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor \\u003d function(rgb_color) { var redFrac \\u003d rgb_color.red || 0.0; var greenFrac \\u003d rgb_color.green || 0.0; var blueFrac \\u003d rgb_color.blue || 0.0; var red \\u003d Math.floor(redFrac * 255); var green \\u003d Math.floor(greenFrac * 255); var blue \\u003d Math.floor(blueFrac * 255); if (!(\\u0027alpha\\u0027 in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac \\u003d rgb_color.alpha.value || 0.0; var rgbParams \\u003d [red, green, blue].join(\\u0027,\\u0027); return [\\u0027rgba(\\u0027, rgbParams, \\u0027,\\u0027, alphaFrac, \\u0027)\\u0027].join(\\u0027\\u0027); }; var rgbToCssColor \\u003d function(red, green, blue) { var rgbNumber \\u003d new Number((red \\u003c\\u003c 16) | (green \\u003c\\u003c 8) | blue); var hexString \\u003d rgbNumber.toString(16); var missingZeros \\u003d 6 - hexString.length; var resultBuilder \\u003d [\\u0027#\\u0027]; for (var i \\u003d 0; i \\u003c missingZeros; i++) { resultBuilder.push(\\u00270\\u0027); } resultBuilder.push(hexString); return resultBuilder.join(\\u0027\\u0027); }; // ...\",\n                \"type\": \"object\"\n              },\n              \"textStyle\": {\n                \"type\": \"string\",\n                \"description\": \"[Text style](https://www.w3schools.com/cssref/pr_font_font-style.asp). Possible values are `normal`, `italic`, and `oblique`.\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"entities\": {\n          \"description\": \"A list of entities detected on Document.text. For document shards, entities in this list may cross shard boundaries.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n            \"properties\": {\n              \"provenance\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"revision\": {\n                  },\n                  \"id\": {\n                    \"format\": \"int32\",\n                    \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                    \"type\": \"integer\"\n                  },\n                  \"parents\": {\n                  },\n                  \"type\": {\n                  }\n                },\n                \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n              },\n              \"pageAnchor\": {\n                \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"pageRefs\": {\n                  }\n                }\n              },\n              \"mentionId\": {\n                \"type\": \"string\",\n                \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n              },\n              \"normalizedValue\": {\n                \"properties\": {\n                  \"datetimeValue\": {\n                  },\n                  \"integerValue\": {\n                  },\n                  \"addressValue\": {\n                  },\n                  \"dateValue\": {\n                  },\n                  \"floatValue\": {\n                  },\n                  \"booleanValue\": {\n                  },\n                  \"moneyValue\": {\n                  },\n                  \"text\": {\n                  }\n                },\n                \"type\": \"object\",\n                \"description\": \"Parsed and normalized entity value.\"\n              },\n              \"confidence\": {\n                \"type\": \"number\",\n                \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                \"format\": \"float\"\n              },\n              \"properties\": {\n                \"type\": \"array\",\n                \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                \"items\": {\n                  \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                  \"properties\": {\n                    \"provenance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"revision\": {\n                        },\n                        \"id\": {\n                          \"format\": \"int32\",\n                          \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                          \"type\": \"integer\"\n                        },\n                        \"parents\": {\n                        },\n                        \"type\": {\n                        }\n                      },\n                      \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                    },\n                    \"pageAnchor\": {\n                      \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"pageRefs\": {\n                        }\n                      }\n                    },\n                    \"mentionId\": {\n                      \"type\": \"string\",\n                      \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                    },\n                    \"normalizedValue\": {\n                      \"properties\": {\n                        \"datetimeValue\": {\n                        },\n                        \"integerValue\": {\n                        },\n                        \"addressValue\": {\n                        },\n                        \"dateValue\": {\n                        },\n                        \"floatValue\": {\n                        },\n                        \"booleanValue\": {\n                        },\n                        \"moneyValue\": {\n                        },\n                        \"text\": {\n                        }\n                      },\n                      \"type\": \"object\",\n                      \"description\": \"Parsed and normalized entity value.\"\n                    },\n                    \"confidence\": {\n                      \"type\": \"number\",\n                      \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                      \"format\": \"float\"\n                    },\n                    \"properties\": {\n                      \"type\": \"array\",\n                      \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                      \"items\": {\n                        \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                        \"properties\": {\n                          \"provenance\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"revision\": {\n                              },\n                              \"id\": {\n                                \"format\": \"int32\",\n                                \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                \"type\": \"integer\"\n                              },\n                              \"parents\": {\n                              },\n                              \"type\": {\n                              }\n                            },\n                            \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                          },\n                          \"pageAnchor\": {\n                            \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"pageRefs\": {\n                              }\n                            }\n                          },\n                          \"mentionId\": {\n                            \"type\": \"string\",\n                            \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                          },\n                          \"normalizedValue\": {\n                            \"properties\": {\n                              \"datetimeValue\": {\n                              },\n                              \"integerValue\": {\n                              },\n                              \"addressValue\": {\n                              },\n                              \"dateValue\": {\n                              },\n                              \"floatValue\": {\n                              },\n                              \"booleanValue\": {\n                              },\n                              \"moneyValue\": {\n                              },\n                              \"text\": {\n                              }\n                            },\n                            \"type\": \"object\",\n                            \"description\": \"Parsed and normalized entity value.\"\n                          },\n                          \"confidence\": {\n                            \"type\": \"number\",\n                            \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                            \"format\": \"float\"\n                          },\n                          \"properties\": {\n                            \"type\": \"array\",\n                            \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                            \"items\": {\n                              \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                              \"properties\": {\n                                \"provenance\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"revision\": {\n                                    },\n                                    \"id\": {\n                                      \"format\": \"int32\",\n                                      \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                      \"type\": \"integer\"\n                                    },\n                                    \"parents\": {\n                                    },\n                                    \"type\": {\n                                    }\n                                  },\n                                  \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                                },\n                                \"pageAnchor\": {\n                                  \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"pageRefs\": {\n                                    }\n                                  }\n                                },\n                                \"mentionId\": {\n                                  \"type\": \"string\",\n                                  \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                                },\n                                \"normalizedValue\": {\n                                  \"properties\": {\n                                    \"datetimeValue\": {\n                                    },\n                                    \"integerValue\": {\n                                    },\n                                    \"addressValue\": {\n                                    },\n                                    \"dateValue\": {\n                                    },\n                                    \"floatValue\": {\n                                    },\n                                    \"booleanValue\": {\n                                    },\n                                    \"moneyValue\": {\n                                    },\n                                    \"text\": {\n                                    }\n                                  },\n                                  \"type\": \"object\",\n                                  \"description\": \"Parsed and normalized entity value.\"\n                                },\n                                \"confidence\": {\n                                  \"type\": \"number\",\n                                  \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                                  \"format\": \"float\"\n                                },\n                                \"properties\": {\n                                  \"type\": \"array\",\n                                  \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                                  \"items\": {\n                                    \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                                    \"properties\": {\n                                      \"provenance\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                          \"revision\": {\n                                          },\n                                          \"id\": {\n                                            \"format\": \"int32\",\n                                            \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                                            \"type\": \"integer\"\n                                          },\n                                          \"parents\": {\n                                          },\n                                          \"type\": {\n                                          }\n                                        },\n                                        \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                                      },\n                                      \"pageAnchor\": {\n                                        \"description\": \"Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.\",\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                          \"pageRefs\": {\n                                          }\n                                        }\n                                      },\n                                      \"mentionId\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Optional. Deprecated. Use `id` field instead.\"\n                                      },\n                                      \"normalizedValue\": {\n                                        \"properties\": {\n                                          \"datetimeValue\": {\n                                          },\n                                          \"integerValue\": {\n                                          },\n                                          \"addressValue\": {\n                                          },\n                                          \"dateValue\": {\n                                          },\n                                          \"floatValue\": {\n                                          },\n                                          \"booleanValue\": {\n                                          },\n                                          \"moneyValue\": {\n                                          },\n                                          \"text\": {\n                                          }\n                                        },\n                                        \"type\": \"object\",\n                                        \"description\": \"Parsed and normalized entity value.\"\n                                      },\n                                      \"confidence\": {\n                                        \"type\": \"number\",\n                                        \"description\": \"Optional. Confidence of detected Schema entity. Range `[0, 1]`.\",\n                                        \"format\": \"float\"\n                                      },\n                                      \"properties\": {\n                                        \"type\": \"array\",\n                                        \"description\": \"Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.\",\n                                        \"items\": {\n                                          \"description\": \"An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.\",\n                                          \"properties\": {\n                                          },\n                                          \"type\": \"object\"\n                                        }\n                                      },\n                                      \"mentionText\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                                      },\n                                      \"id\": {\n                                        \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                                        \"type\": \"string\"\n                                      },\n                                      \"redacted\": {\n                                        \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                                        \"type\": \"boolean\"\n                                      },\n                                      \"textAnchor\": {\n                                        \"properties\": {\n                                          \"content\": {\n                                          },\n                                          \"textSegments\": {\n                                          }\n                                        },\n                                        \"description\": \"Text reference indexing into the Document.text.\",\n                                        \"type\": \"object\"\n                                      },\n                                      \"type\": {\n                                        \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                                        \"type\": \"string\"\n                                      }\n                                    },\n                                    \"type\": \"object\"\n                                  }\n                                },\n                                \"mentionText\": {\n                                  \"type\": \"string\",\n                                  \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                                },\n                                \"id\": {\n                                  \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                                  \"type\": \"string\"\n                                },\n                                \"redacted\": {\n                                  \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                                  \"type\": \"boolean\"\n                                },\n                                \"textAnchor\": {\n                                  \"properties\": {\n                                    \"content\": {\n                                    },\n                                    \"textSegments\": {\n                                    }\n                                  },\n                                  \"description\": \"Text reference indexing into the Document.text.\",\n                                  \"type\": \"object\"\n                                },\n                                \"type\": {\n                                  \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                                  \"type\": \"string\"\n                                }\n                              },\n                              \"type\": \"object\"\n                            }\n                          },\n                          \"mentionText\": {\n                            \"type\": \"string\",\n                            \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                          },\n                          \"id\": {\n                            \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                            \"type\": \"string\"\n                          },\n                          \"redacted\": {\n                            \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                            \"type\": \"boolean\"\n                          },\n                          \"textAnchor\": {\n                            \"properties\": {\n                              \"content\": {\n                              },\n                              \"textSegments\": {\n                              }\n                            },\n                            \"description\": \"Text reference indexing into the Document.text.\",\n                            \"type\": \"object\"\n                          },\n                          \"type\": {\n                            \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"type\": \"object\"\n                      }\n                    },\n                    \"mentionText\": {\n                      \"type\": \"string\",\n                      \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n                    },\n                    \"id\": {\n                      \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                      \"type\": \"string\"\n                    },\n                    \"redacted\": {\n                      \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                      \"type\": \"boolean\"\n                    },\n                    \"textAnchor\": {\n                      \"properties\": {\n                        \"content\": {\n                        },\n                        \"textSegments\": {\n                        }\n                      },\n                      \"description\": \"Text reference indexing into the Document.text.\",\n                      \"type\": \"object\"\n                    },\n                    \"type\": {\n                      \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              },\n              \"mentionText\": {\n                \"type\": \"string\",\n                \"description\": \"Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.\"\n              },\n              \"id\": {\n                \"description\": \"Optional. Canonical id. This will be a unique value in the entity list for this document.\",\n                \"type\": \"string\"\n              },\n              \"redacted\": {\n                \"description\": \"Optional. Whether the entity will be redacted for de-identification purposes.\",\n                \"type\": \"boolean\"\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"type\": {\n                \"description\": \"Required. Entity type from a schema e.g. `Address`.\",\n                \"type\": \"string\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"textChanges\": {\n          \"type\": \"array\",\n          \"description\": \"Placeholder. A list of text corrections made to Document.text. This is usually used for annotating corrections to OCR mistakes. Text changes for a given revision may not overlap with each other.\",\n          \"items\": {\n            \"description\": \"This message is used for text changes aka. OCR corrections.\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"provenance\": {\n                \"description\": \"The history of this annotation.\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"revision\": {\n                      \"description\": \"The index of the revision that produced this element.\",\n                      \"type\": \"integer\",\n                      \"format\": \"int32\"\n                    },\n                    \"id\": {\n                      \"format\": \"int32\",\n                      \"description\": \"The Id of this operation. Needs to be unique within the scope of the revision.\",\n                      \"type\": \"integer\"\n                    },\n                    \"parents\": {\n                      \"description\": \"References to the original elements that are replaced.\",\n                      \"items\": {\n                        \"description\": \"The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.\",\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"integer\",\n                            \"description\": \"The id of the parent provenance.\",\n                            \"format\": \"int32\"\n                          },\n                          \"revision\": {\n                          },\n                          \"index\": {\n                          }\n                        },\n                        \"type\": \"object\"\n                      },\n                      \"type\": \"array\"\n                    },\n                    \"type\": {\n                      \"description\": \"The type of provenance operation.\",\n                      \"enumDescriptions\": [\"Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.\", \"Add an element.\", \"Remove an element identified by `parent`.\", \"Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties.\", \"Currently unused. Replace an element identified by `parent`.\", \"Deprecated. Request human review for the element identified by `parent`.\", \"Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.\", \"Deprecated. Element is skipped in the validation process.\"],\n                      \"type\": \"string\",\n                      \"enum\": [\"OPERATION_TYPE_UNSPECIFIED\", \"ADD\", \"REMOVE\", \"UPDATE\", \"REPLACE\", \"EVAL_REQUESTED\", \"EVAL_APPROVED\", \"EVAL_SKIPPED\"]\n                    }\n                  },\n                  \"description\": \"Structure to identify provenance relationships between annotations in different revisions.\"\n                }\n              },\n              \"textAnchor\": {\n                \"properties\": {\n                  \"content\": {\n                  },\n                  \"textSegments\": {\n                  }\n                },\n                \"description\": \"Text reference indexing into the Document.text.\",\n                \"type\": \"object\"\n              },\n              \"changedText\": {\n                \"type\": \"string\",\n                \"description\": \"The text that replaces the text identified in the `text_anchor`.\"\n              }\n            }\n          }\n        },\n        \"uri\": {\n          \"type\": \"string\",\n          \"description\": \"Optional. Currently supports Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. For more information, refer to [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris).\"\n        },\n        \"text\": {\n          \"type\": \"string\",\n          \"description\": \"Optional. UTF-8 encoded text in reading order from the document.\"\n        },\n        \"entityRelations\": {\n          \"description\": \"Placeholder. Relationship among Document.entities.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"Relationship between Entities.\",\n            \"properties\": {\n              \"subjectId\": {\n                \"description\": \"Subject entity id.\",\n                \"type\": \"string\"\n              },\n              \"relation\": {\n                \"description\": \"Relationship description.\",\n                \"type\": \"string\"\n              },\n              \"objectId\": {\n                \"type\": \"string\",\n                \"description\": \"Object entity id.\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"mimeType\": {\n          \"description\": \"An IANA published [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml).\",\n          \"type\": \"string\"\n        },\n        \"error\": {\n          \"properties\": {\n            \"message\": {\n              \"description\": \"A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.\",\n              \"type\": \"string\"\n            },\n            \"details\": {\n              \"items\": {\n                \"additionalProperties\": {\n                  \"type\": \"any\",\n                  \"description\": \"Properties of the object. Contains field @type with type URL.\"\n                },\n                \"type\": \"object\"\n              },\n              \"description\": \"A list of messages that carry the error details. There is a common set of message types for APIs to use.\",\n              \"type\": \"array\"\n            },\n            \"code\": {\n              \"type\": \"integer\",\n              \"description\": \"The status code, which should be an enum value of google.rpc.Code.\",\n              \"format\": \"int32\"\n            }\n          },\n          \"type\": \"object\",\n          \"description\": \"The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).\"\n        }\n      },\n      \"type\": \"object\",\n      \"description\": \"Document represents the canonical document resource in Document AI. It is an interchange format that provides insights into documents and allows for collaboration between users and Document AI to iterate and optimize for quality.\"\n    }\n  }\n}"
  }],
  "databasePersistencePolicy": "DATABASE_PERSISTENCE_ASYNC",
  "integrationConfigParameters": [{
    "parameter": {
      "key": "`CONFIG_Vertex_Project_ID`",
      "dataType": "STRING_VALUE",
      "defaultValue": {
        "stringValue": "standalone-ip-prod-testing-88"
      },
      "displayName": "`CONFIG_Vertex_Project_ID`"
    },
    "value": {
      "stringValue": "standalone-ip-prod-testing-88"
    }
  }, {
    "parameter": {
      "key": "`CONFIG_Vertex_LOCATION_ID`",
      "dataType": "STRING_VALUE",
      "defaultValue": {
        "stringValue": "us-central1"
      },
      "displayName": "`CONFIG_Vertex_LOCATION_ID`"
    },
    "value": {
      "stringValue": "us-central1"
    }
  }, {
    "parameter": {
      "key": "`CONFIG_Vertex_MODEL_ID`",
      "dataType": "STRING_VALUE",
      "defaultValue": {
        "stringValue": "gemini-1.5-flash-002"
      },
      "displayName": "`CONFIG_Vertex_MODEL_ID`"
    },
    "value": {
      "stringValue": "gemini-1.5-flash-002"
    }
  }, {
    "parameter": {
      "key": "`CONFIG_GCS_POS_BUCKET`",
      "dataType": "STRING_VALUE",
      "defaultValue": {
        "stringValue": "standalone-ip-prod-testing-88-app-integration-sample"
      },
      "displayName": "`CONFIG_GCS_POS_BUCKET`"
    },
    "value": {
      "stringValue": "standalone-ip-prod-testing-88-app-integration-sample"
    }
  }, {
    "parameter": {
      "key": "`CONFIG_POS_GCS_FOLDER`",
      "dataType": "STRING_VALUE",
      "defaultValue": {
        "stringValue": "vertex-ai-sample/"
      },
      "displayName": "`CONFIG_POS_GCS_FOLDER`"
    },
    "value": {
      "stringValue": "vertex-ai-sample/"
    }
  }]
}